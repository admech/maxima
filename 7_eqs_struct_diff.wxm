/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: input   start ] */
load("helper.mac");
ratprint: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Отличия от уравнений без роликов
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Покажем, что уравнения для системы с роликами отличаются от уравнений без роликов
аддитивным членом порядка момента инерции ролика в правой части (до разрешений относительно псевдоскоростей):
M* Dnu = f(nu, chi) + B*g(nu, chi)
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Приготовления
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Уравнения без роликов и с роликами
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
batchload("6_eqs_struct_no_rollers.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("5_eqs_struct.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Вспомогательные функции
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill(rho) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rho(i) := l*cos(q[3 + i]) - r $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
free_wheel_num(s) := floor((s - 1)/(n_rollers - 1)) $
free_roller_num(s) := mod(s - 1, n_rollers - 1) + 2 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst_chis_and_kappas(expr) := expr where append(
    makelist(chi[i] = q[3 + i], i, 1, N_wheels),
    makelist((chi + kappa)[s] = q[3+free_wheel_num(s)] + kappa[free_roller_num(s)], s, 4, dof),
    makelist(chi[s] = q[3+free_wheel_num(s)], s, 4, dof)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
checkable(expr) := ev(
    ev(expr, sum) where [ 
        subst_chis_and_kappas
    ]
, nouns) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* so that we could diff exprs of i and s */
for var in [
    chii,
    kappa_chi_s,
    chi,
    rho,
    nu,
    nu_s
] do depends(var, t) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
diffable(expr) := expr where [ 
    'rho(i) = l*cos(chi[i]) - r,
    chi[i] = chii,
    (kappa + chi)[s] = kappa_chi_s
] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
do_diff(expr) := diff(
        expr where [
            'rho(i) = rho[i],
            'nu[s] = nu_s[s],
            (kappa + chi)[s] = kappa[s] + chi[s]
        ]
    , t) where [ 
    rho[i] = 'rho(i),
    nu_s[s] = 'nu[s],
    kappa[s] + chi[s] = (kappa + chi)[s]
] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
summable(expr) := expr where [ chii = 'q[3 + i] ] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
do_check(original, pretty) := (checkable(pretty) - original) where [ expand, ratsimp ] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
compare_terms(pretty, original) := lsum(term, term, map(factor, 
    expr_to_terms(expand(
        checkable(summable(
            pretty
        ))
    ))
))
-
lsum(term, term, map(factor, 
    expr_to_terms(
        original
    )
)) 
$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ok_or_error(expected, actual, difference) := if actual = expected then "OK" else error(concat("PRETTY IS NOT EQUAL TO ORIGINAL! DIFF = ", difference(actual))) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
zero_or_error(actual) := ok_or_error(0, actual, lambda([expr], expr)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
check(original, pretty) := ok_or_error(0, do_check(original, pretty), lambda([expr], expr)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
check123(original, pretty) := block([result],
    result: makelist(do_check(original[i], pretty[i]), i, 1, 3),
    ok_or_error(makelist(0, i, 1, 3), result, simplode(result, ", "))
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expr_to_terms(expr) := block([terms],
    terms: [],
    for term in expr do terms: cons(term, terms),
    terms
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Левая часть: d/dt(dL* / dnu)
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
L*
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Лагранжиан со связями, как и кинетическая энергия, отличается от оного системы без роликов лишь аддитивным членом,
пропорциональным моменту инерции ролика относительно оси его собственного вращения:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
L_star_diff: (L_star - old_L_star) where [ expand ] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
разность пропорциональна B:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(L_star_diff = (coeff(L_star_diff, B) * B) where [ expand ]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
запишем наглядно:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/*
for i:1 thru dof do
    for j:i thru dof do
        block([coe],
            coe: (diff(diff(L_star_diff where [ expand ], nu[i]), nu[j]) / (if i = j then 2 else 1)) where [ expand ],
            if not coe = 0 then print(nu[i]*nu[j] = coe)
        ) ;
*/

L_star_diff_pretty: B/2 * (
    'sum(
        (('nu[1]*cos(alpha[i]) + 'nu[2]*sin(alpha[i]))*R)^2 /'rho(i)^2 +
        2*(sin(alpha[i])*'nu[2] + cos(alpha[i])*'nu[1])*sin(chi[i] + kappa[1])*'nu[3]*R/(Lambda*'rho(i))
    , i, 1, N_wheels) + 
    
    'sum(
        'nu[3]*2*'nu[s]*sin((chi+kappa)[s])/Lambda + 'nu[s]^2
    , s, 4, dof)
) $
"L*_rollers - L*_old" = L_star_diff_pretty;
"where s corresponds to free rollers and (kappa + chi)[s] means kappa[j] + chi[i] for i = 1..N_wheels, j = 2..n_rollers";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
check(L_star_diff, L_star_diff_pretty);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
dL* / dnu
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
D_L_star_dnus: makelist(diff(L_star_diff, nu[i]), i, 1, dof) $
/*
for i:1 thru dof do print(concat("dL* / dnu[", i, "] = "), D_L_star_dnus[i]) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_L_star_dnus_pretty: B * [
    'sum(cos(alpha[i])^2*nu[1]*R^2/'rho(i)^2 + cos(alpha[i])*sin(alpha[i])*nu[2]*R^2/'rho(i)^2 + cos(alpha[i])*sin(chi[i] + kappa[1])*nu[3]*R/('rho(i)*Lambda), i, 1, 3),
    'sum(sin(alpha[i])^2*nu[2]*R^2/'rho(i)^2 + cos(alpha[i])*sin(alpha[i])*nu[1]*R^2/'rho(i)^2 + sin(alpha[i])*sin(chi[i] + kappa[1])*nu[3]*R/('rho(i)*Lambda), i, 1, 3),
    'sum((sin(alpha[i])*nu[2] + cos(alpha[i])*nu[1])*sin(chi[i] + kappa[1])*R/('rho(i)*Lambda), i, 1, 3) + 'sum((sin((chi+kappa)[s])*'nu[s])/Lambda, s, 4, dof),
    'nu[s] + sin((chi+kappa)[s])*nu[3]/Lambda
] $
for i:1 thru 3 do print(concat("dL* / dnu[", i, "] = "), D_L_star_dnus_pretty[i]) $
print(concat("dL* / dnu[s] = "), D_L_star_dnus_pretty[4]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
check123(D_L_star_dnus, D_L_star_dnus_pretty);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
d/dt(dL* / dnu)
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Человеческие выражения:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Ddt_D_L_star_dnus_pretty: [
    do_diff(D_L_star_dnus_pretty[1]),
    do_diff(D_L_star_dnus_pretty[2]),
    do_diff(D_L_star_dnus_pretty[3]),
    do_diff(D_L_star_dnus_pretty[4])
] $
for i:1 thru 3 do print(concat("d/dt(dL* / dnu[", i, "]) = "), Ddt_D_L_star_dnus_pretty[i]) $
print(concat("d/dt(dL* / dnu[s]) = "), Ddt_D_L_star_dnus_pretty[4]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Машинные выражения:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Ddt_D_L_star_dnus: diff(D_L_star_dnus, t) $
/*
for i:1 thru dof do print(concat("d/dt(dL* / dnu[", i, "]) = "), Ddt_D_L_star_dnus[i]) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
сравнение:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
for i:1 thru 3 do print(zero_or_error(compare_terms(Ddt_D_L_star_dnus_pretty[i], Ddt_D_L_star_dnus[i]))) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i:4 thru dof do print(zero_or_error(compare_terms(Ddt_D_L_star_dnus_pretty[4] where [ s = i ], Ddt_D_L_star_dnus[i]))) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Правая часть: -{ P[alpha], L* } + { P[alpha], nu[mu] * P[mu] }
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
{ P[alpha], L* }
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Заметим, что

{ P_rol, L*_rol } - { P_old, L*_old } = { P_rol, L*_delta }, 


Действительно, { P_rol, L*_rol } - { P_old, L*_old } = { P_old + P_delta, L*_old + L*_delta } - { P_old, L*_old } =

= { P_old, L*_old } + { P_old, L*_delta } + { P_delta, L*_old} + { P_delta, L*_delta } - { P_old, L*_old } =
  ^^^^^^^^^^^^^^^^^                         \________________/                        ^^^^^^^^^^^^^^^^^^^^
                                                    ||
                                                    0, ибо P_delta = P_delta(chi, p_phi),
                                                            d(L*_old)/d(chi) и d(phi) = 0
= { P_old, L*_delta } + { P_delta, L*_delta }.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_P_pretty: append([

    /* P[1] */
    p_y*sin(theta)*R+p_x*cos(theta)*R+
    'sum(
        (cos(alpha[i])*'p[3 + N_wheels + i]*R)/rho[i] +
        (sin(alpha[i])*'p[3 + i]*R)/l
    , i, 1, N_wheels),

    /* P[2] */
    -p_x*sin(theta)*R+p_y*cos(theta)*R+
    'sum(
        (sin(alpha[i])*'p[3 + N_wheels + i]*R)/rho[i] +
        -(cos(alpha[i])*'p[3 + i]*R)/l
    , i, 1, N_wheels),

    /* P[3] */
    p_theta/Lambda - 'sum('p[3 + i]*R/(l*Lambda), i, 1, N_wheels)

], makelist(p[i], i, 3 + 2*N_wheels + 1, n_coords)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i:1 thru 3 do print(concat("_P[", i, "] = "), _P_pretty[i]) $
print("L_star_diff = ", L_star_diff_pretty) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
L_star_diff_pretty_chi: L_star_diff_pretty where [
    'rho(i) = l*cos(chi[i]) - r,
    'sum((2*'nu[3]*'nu[s]*sin((kappa+chi)[s]))/Lambda+'nu[s]^2,s,4,12) = 
    'sum('sum(
        (2*'nu[3]*'nu[free_nu_num(i, j)]*sin(kappa[j]+chi[i]))/Lambda+'nu[free_nu_num(i, j)]^2
    , j, 2, n_rollers), i, 1, N_wheels)
];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
P зависит от theta, chi, p_x, p_y, p_chi (i+3), p_phi (i+6),
L*_delta зависит только от chi,
=> нас интересует только dP[1]/dp_chi и dL*_diff/dchi:

{ P_rol, L*_delta } = -dP_rol/dp_chi * dL*_delta/dchi
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
dL*_delta/dchi:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
diff(L_star_diff_pretty_chi, chi[i]) $

D_L_star_diff_pretty_dchi_i: (
    B*(
        (
            (('nu[2]*sin(alpha[i])+'nu[1]*cos(alpha[i]))^2*sin(chi[i])*l*R^2)/rho[i]^3
            +
            (
                'nu[3]*('nu[2]*sin(alpha[i])+'nu[1]*cos(alpha[i]))*R
                *
                (
                    cos(chi[i]+kappa[1])*rho[i]
                +
                    sin(chi[i])*sin(chi[i]+kappa[1])*l
                )
            )/(Lambda*rho[i]^2)
        )
        +
        ('nu[3]*
                'sum('nu[j+3*i-1]*cos(kappa[j]+chi[i]),j,2,n_rollers)
        )/Lambda
    )
) ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
dP_rol/dp_chi:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/* 1 */
diff(_P_pretty[1], 'p[3+i]) $
D_P_pretty_1_dp_chi_i: sin(alpha[i])*R/l $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* 2 */
diff(_P_pretty[2], 'p[3+i]) $
D_P_pretty_2_dp_chi_i: -cos(alpha[i])*R/l $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* 3 */
_P_pretty[3] $
D_P_pretty_3_dp_chi_i: diff(_P_pretty[3], 'p[3+i])/N_wheels $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* s */
makelist(_P_pretty[i], i, 4, dof) $
D_P_pretty_s_dp_chi_i: 0 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
{ P_rol, L*_delta }:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pois_P_L_star_delta_pretty: [
    -'sum(D_P_pretty_1_dp_chi_i * D_L_star_diff_pretty_dchi_i, i, 1, N_wheels),
    -'sum(D_P_pretty_2_dp_chi_i * D_L_star_diff_pretty_dchi_i, i, 1, N_wheels),
    -'sum(D_P_pretty_3_dp_chi_i * D_L_star_diff_pretty_dchi_i, i, 1, N_wheels),
    -'sum(D_P_pretty_s_dp_chi_i * D_L_star_diff_pretty_dchi_i, i, 1, N_wheels)
] $
for i:1 thru 3 do print("{ P[", i, "], L*_delta } = ", pois_P_L_star_delta_pretty[i]) $
print("{ P[s], L*_delta } = ", pois_P_L_star_delta_pretty[4]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Эта часть также пропорциональна B:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pois_P_L_star_diff: makelist(pois(_P[i], L_star_diff, z), i, 1, dof) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(
    ((coeff(pois_P_L_star_diff[i] where [ expand ], B)*B) where [ expand ]) - (pois_P_L_star_diff[i] where [ expand ])
    , i, 1, dof
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Человеческие выражения совпадают с машинными:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
append(
    makelist(
        (pois_P_L_star_diff[j] - (checkable(pois_P_L_star_delta_pretty[j] where [ rho[i] = 'rho(i) ]))) where [ expand, ratsimp ]
    , j, 1, 3),
    makelist(pois_P_L_star_diff[i] - pois_P_L_star_delta_pretty[4], i, 4, dof)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
{ P[alpha], nu[mu] * P[mu] }
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
{ P_rol[alpha], P_rol[mu] } - { P_old[alpha], P_old[mu] } = { P_old[alpha], P_delta[mu] } + { P_delta[alpha], P_old[mu] }
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
если alpha или mu > 4, то { P[alpha], P[mu] } = 0:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
makelist(makelist(
    pois(_P[i], _P[s], z),
i, 1, 3), s, 4, dof);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
поэтому рассмотрим эту разность только для alpha, mu < 3:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
PP_diff: makelist((
    sum(nu[i] * pois( _P[j], _P[i], z ), i, 1, dof)
    -
    sum(old_nu[i] * pois( _old_P[j], _old_P[i], old_z ), i, 1, old_dof)
) where append(
    [ expand ],
    makelist(cos(alpha[i])^2 = 1 - sin(alpha[i])^2, i, 1, N_wheels) /* AHAHAHAHAHAHAHA!!! */
    ), j, 1, 3) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
PP_diff_almost_pretty: makelist((
    sum(nu[i] * pois( _P[j], _P[i], z ), i, 1, dof)
    -
    sum(old_nu[i] * pois( _old_P[j], _old_P[i], old_z ), i, 1, old_dof)
) where append(
    [ expand ],
    makelist(cos(alpha[i])^2 = 1 - sin(alpha[i])^2, i, 1, N_wheels),
    [ expand ],
    flatten(makelist([
        expand(rho(i)^2) = rho[i]^2,
        expand(Lambda*rho(i)^2) = Lambda*rho[i]^2
    ], i, 1, N_wheels)),
    [ 
        fac(p), 
        distrib
    ],
    flatten(makelist([
        q[3+i] = chi[i],
        p[6+i] = 'p[phi[i]]
    ], i, 1, 3)),
    [
        subst_all_sums(i, 3,[
            -(sin(chi[i])*(cos(alpha[i])*nu3+Lambda*nu2)*'p[phi[i]]*R^2)/(rho[i]^2*Lambda),
            -(sin(chi[i])*'p[phi[i]]*(sin(alpha[i])*nu3-Lambda*nu1)*R^2)/(rho[i]^2*Lambda),
            (sin(chi[i])*'p[phi[i]]*(sin(alpha[i])*nu2+cos(alpha[i])*nu1)*R^2)/(rho[i]^2*Lambda)
        ])
    ]
), j, 1, 3) $

for i:1 thru 3 do print(
    'sum('nu[mu] * {'P[i], 'P[mu]}, mu, 1, dof)
    -
    'sum('nu[mu] * {'P[old][i], 'P[old][mu]}, mu, 1, old_dof)
, " = ", PP_diff_almost_pretty[i] ) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
разности пропорциональны p_phi, соответствующим роликам, находящимся в контакте,
которые, в выражении через связи, пропорциональны B:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
for i:7 thru 6 + N_wheels do print(subst_ps[i]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
PP_diff_pretty: makelist(PP_diff_almost_pretty[j] where [
    'p[phi[i]] = B*(
        ((sin(alpha[i])*nu2*R+cos(alpha[i])*nu1*R)/rho[i])+(sin(chi[i]+kappa[1])*nu3)/Lambda
    )
], j, 1, 3) $

for j:1 thru 3 do print(
    'sum('nu[mu] * {'P[j], 'P[mu]}, mu, 1, dof)
    -
    'sum('nu[mu] * {'P[old][j], 'P[old][mu]}, mu, 1, old_dof)
, " = ", PP_diff_pretty[j]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
человеческие выражения совпадают с машинными:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
makelist(
   ((PP_diff[j] where subst_ps) - (checkable(PP_diff_pretty[j] where [ rho[i] = 'rho(i) ]))) where [ expand, ratsimp ]
, j, 1, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Уравнения с роликами
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
L*
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
L_star where append(
    flatten(makelist([
        expand(rho(i)^2) = rho[i]^2,
        expand(rho(i)*Lambda) = rho[i]*Lambda,
        q[3+i] = chi[i]
    ], i, 1, N_wheels)),
    makelist(
        nu[i] = nuu[i]
    , i, 4, dof),
[
    subst_all_sums(i, N_wheels, [
        (2*cos(alpha[i])*nu2*nu3*J*R^2)/(l^2*Lambda),
        -(2*sin(alpha[i])*nu1*nu3*J*R^2)/(l^2*Lambda),
        (cos(alpha[i])^2*nu2^2*J*R^2)/l^2,
        -(2*cos(alpha[i])*sin(alpha[i])*nu1*nu2*J*R^2)/l^2,
        (sin(alpha[i])^2*nu1^2*J*R^2)/l^2,
        (sin(alpha[i])^2*nu2^2*B*R^2)/rho[i]^2,
        (2*cos(alpha[i])*sin(alpha[i])*nu1*nu2*B*R^2)/rho[i]^2,
        (cos(alpha[i])^2*nu1^2*B*R^2)/rho[i]^2,
        (2*sin(alpha[i])*sin(chi[i]+kappa[1])*nu2*nu3*B*R)/(rho[i]*Lambda),
        (2*cos(alpha[i])*sin(chi[i]+kappa[1])*nu1*nu3*B*R)/(rho[i]*Lambda)
    ]),
    subst_all_sums(i, dof, [
        nuu[i]^2*B,
        (2*nuu[i]*sin(kappa[free_roller_num(i)]+chi[free_wheel_num(i)])*nu3*B)/Lambda
    ])
]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Левая часть: d/dt(dL* / dnu)
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
d/dt(dL* / dnu) = M*.d/dt(nu) + d/dt(M*).nu
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
diff(_M_star[1], t) . nu;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Правая часть: -{ P[alpha], L* } + { P[alpha], nu[mu] * P[mu] }
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
{ P[alpha], L* }
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
expand(2*l*sin(chi3)*rho(3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_P[1], L_star, z) where append(
    makelist(nu[i] = 0, i, 4, dof),
    flatten(makelist([
        expand(rho(i)^2) = rho[i]^2,
        expand(rho(i)*Lambda) = rho[i]*Lambda
    ], i, 1, N_wheels))
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
{ P[alpha], nu[mu] * P[mu] }
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
sum(nu[i] * pois(_P[1], _P[i], z), i, 1, dof);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
