/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: input   start ] */
load("helper.mac");
ratprint: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("6_eqs_struct_no_rollers.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("5_eqs_struct.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Отличия от уравнений без роликов
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Покажем, что уравнения для системы с роликами отличаются от уравнений без роликов
аддитивным членом порядка момента инерции ролика в правой части (до разрешений относительно псевдоскоростей):
M* Dnu = f(nu, chi) + B*g(nu, chi)
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Левая часть - d/dt(dL*/dnu)
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
dL*
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Лагранжиан со связями, как и кинетическая энергия, отличается от оного системы без роликов лишь аддитивным членом,
пропорциональным моменту инерции ролика относительно оси его собственного вращения:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
L_star_diff: (L_star - old_L_star) where [ expand ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
разность пропорциональна B:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(L_star_diff = (coeff(L_star_diff, B) * B) where [ expand ]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
запишем наглядно:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/*
for i:1 thru dof do
    for j:i thru dof do
        block([coe],
            coe: (diff(diff(L_star_diff where [ expand ], nu[i]), nu[j]) / (if i = j then 2 else 1)) where [ expand ],
            if not coe = 0 then print(nu[i]*nu[j] = coe)
        ) ;
*/

L_star_diff_pretty: B/2 * (
    'nu[1]^2 * 'sum(R^2*cos(alpha[i])^2/(l*cos(chi[i]) - r), i, 1, N_wheels) + 
    'nu[2]^2 * 'sum(R^2*sin(alpha[i])^2/(l*cos(chi[i]) - r), i, 1, N_wheels) +
    'nu[3]*'sum('nu[s]*sin((chi+kappa)[s])/(2*Lambda), s, 4, dof) +
    'sum('nu[s]^2, s, 4, dof)
) $
"L*_rollers - L*_old" = L_star_diff_pretty;
"where s corresponds to free rollers and (kappa + chi)[s] means kappa[j] + chi[i] for i = 1..N_wheels, j = 2..n_rollers";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
dL*/dnu
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
D_L_star_diff_dnus_pretty: append([
    
])
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_L_star_diff_dnus: makelist(diff(L_star_diff, nu[i]), i, 1, dof) $
for i:1 thru dof do print(concat("dL*/dnu[", i, "] = "), D_L_star_diff_dnus[i]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_L_star_diff_dnus_pretty: makelist(diff(L_star_diff_pretty, 'nu[i]), i, 1, dof) $
for i:1 thru dof do print(concat("dL*/d", nu[i]) = D_L_star_diff_dnus_pretty[i]) $

for i:1 thru dof do print(concat("dL*/d", nu[i]) = diff(L_star_diff, nu[i])) $
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
