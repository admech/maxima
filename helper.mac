derivabbrev: true $

eval_on_array(fun, var, arr) := block([x, f],
    f(x) := subst(x, var, fun), 
    map(f, arr)
) $

as_vec(vec, base) := block([x, coe, line],
    coe(x) := coeff(vec, x),
    line: map(coe, base),
    transpose(line)
) $

quadr(matr, column_vec) := block(
    transpose(column_vec).(matr.column_vec)
) $

sum_arr(arr) := block([n, ones],
    n: length(arr),
    ones: makelist(1, i, 1, n),
    ones.arr
) $

kill("where") $
where(expr, equalities) := block([substequality, apply_fun_to_ex, process, proxy, is_fun],
    substequality(ex, equality) := subst(second(equality), first(equality), ex),
    apply_fun_to_ex(ex, fun) := fun(ex),
    is_fun(item) := atom(item) or not is(op(item) = "="),
    process(ex, item) := if is_fun(item) then apply_fun_to_ex(ex, item) else substequality(ex, item),
    lreduce(process, append([expr], equalities))) $
infix("where") $

fac(base) := buildq([base], lambda([expr], facsum(expr, base))) $

kill("forall") $
forall(expr, item_in_expr_and_items) := makelist(
    subst(item_of_list, first(item_in_expr_and_items), expr), 
    item_of_list, second(item_in_expr_and_items)
);
infix("forall") $

make_sums(expr_of_i, index, n) := block([target_expr, resulting_equality],
    define(expr_lambda(i), expr_of_i),
    kindasum(expr, index, n) := buildq([expr, index, n], 'sum(expr, index, 1, n) / n),
    target_expr: kindasum(expr_lambda(index), index, n),
    resulting_equality(eq_index) := expr_lambda(eq_index) = target_expr,
    makelist(resulting_equality(eq_index), eq_index, 1, n)
) $

subst_sums(tgt_expr, index, n) := buildq([tgt_expr, index, n], lambda([src_expr], src_expr where make_sums(tgt_expr, index, n))) $

subst_all_sums(index, n, sums) := buildq([index, n, sums], lambda([expr], expr where makelist(subst_sums(sum, index, n), sum, sums))) $

check_symmetric(mat) := if not is(transpose(mat) = mat) then error("NOT SYMMETRIC, SOMETHING BROKE") else "IS SYMMETRIC" $

check_antisymmetric(mat) := if is(transpose(mat) = mat) then error("SYMMETRIC, SOMETHING BROKE") else "IS ANTISYMMETRIC" $

vecdiff(expr, vec) := transpose(makelist(diff(expr, var), var, vec)) $

sympl_ident(n) := mat_unblocker(matrix(
    [ zeromatrix(n, n), ident(n)         ],
    [ -ident(n),        zeromatrix(n, n) ]
)) $

pois(F, G, z) := if oddp(length(z)) then error(sconcat("LENGTH OF Z SHOULD BE EVEN, WAS: ", length(z))) else transpose(vecdiff(F, z)) . sympl_ident(length(z) / 2) . vecdiff(G, z) $

nth(list, n) := list[n] $

/* wxmx won't load for some reason */
file_type_maxima: cons("wxm", file_type_maxima) $

get_current_dir() := if is(load_pathname = false) then "" else pathname_directory(load_pathname) $

sub_list(l, i0, i1) := makelist(l[i], i, makelist(i, i, i0, i1));

/*
    A function to invert the M* matrix. Copied from 12_1_invert_M_star - see for details.
    Some helpers first, though...
*/

mat_E(n) := genmatrix(lambda([i,j], if i = j then 1 else 0), n) $
mat_0(n,m) := genmatrix(lambda([i,j], 0), n, m) $

/* multiply by this matrix from the left (this . yours) to get yours row n multiplied by mult */
mult_row(mult, n, size) := mat_E(size) + ematrix(size, size, mult - 1, n, n) $

/* add row n multiplied by mult to row m */
add_row(mult, n, m, size) := mat_E(size) + ematrix(size, size, mult, m, n) $

invert_M(mat) := block(
    [
        size, B, bs,
        step1, step2,
        indices_to_remove, upper_left_corner
    ],

    size: length(mat),
    B: mat[4,4], /* diagonal elements of the lower-right corner */
    bs: makelist(mat[3,i], i, 4, size), /* elements of the third line (row) beyond the upper-left corner */
    indices_to_remove: makelist(i, i, 4, size), /* so as to retain only the upper-left corner */

    /* step 1: eliminate elements of line 3 (the 'bs') beyond the upper-left corner */
    /*         to get a modified state of it needed in step 2                       */
    step1: lreduce(             /* elementary transformations are encoded as matrices below and applied by multiplying by them from the left, */
        lambda([a,b], a.b),     /* so code is executed in reverse order                                                                       */
        append(
            makelist(add_row(-bs[i]/B, i+3, 3, size), i, 1, size-3), /* to do so, add rows starting with 4 multiplied accordingly */
            [ mat ]                                                  /* M* is being used here */
        )
    ),

    /* we'll need to invert it in step 2... */
    upper_left_corner: apply(submatrix, append(indices_to_remove, [step1], indices_to_remove)),

    /* apply transformations to an identity matrix */
    step2: /*ratsimp(*/ /* ratsimp takes LONG for a real matrix */
    lreduce( /* remember, things happen in reverse order */
        lambda([a,b], a.b),
        append(
            makelist(mult_row(1/B, i, size), i, 4, size),            /* last, unscale the lower-right corner */
            makelist(add_row(-bs[i], 3, i+3, size), i, 1, size-3),   /* third, remove column 3 */
            [                                                        /* second, multiply by the inverse upper-left corner */
                mat_fullunblocker(matrix(
                    [ invert(upper_left_corner), mat_0(3,size-3) ],
                    [ mat_0(size-3,3),           mat_E(size-3)   ]
                ))
            ],
            makelist(add_row(-bs[i]/B, i+3, 3, size), i, 1, size-3), /* first, eliminate row 3 again (now for E, not M*) */
            [ mat_E(size) ]
        )
    )
    /*)*/
) $

/* Currying (from http://maxima.sourceforge.net/docs/manual/maxima_36.html) */
curry (f, [a]) := buildq ([f, a], lambda ([[x]], apply (f, append (a, x)))) $

/* lambdas are just too verbose in Maxima */
/* usage: [a1,a2,a3] -> (a1 + a2 + a3) */
"->" (args, expr) ::= buildq([args, expr], lambda(args, expr));
infix("->");