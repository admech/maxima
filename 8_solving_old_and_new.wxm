/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: input   start ] */
batchload("helper.mac") ;
ratprint: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("3_sol/2_num_int.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("3_sol/3_plot.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Численное решение уравнений с роликами и без,
к сожалению, пока не удавшееся из-за уравнений с роликами :(

Зато тут есть более-менее явный вид этих уравнений!
Надо раскомментировать куски правой части.
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Покажем, что уравнения для системы с роликами отличаются от уравнений без роликов
аддитивным членом порядка момента инерции ролика в правой части (до разрешений относительно псевдоскоростей):
M* Dnu = f(nu, chi) + B*g(nu, chi)
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Приготовления
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Уравнения без роликов и с роликами
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
batchload("6_eqs_struct_no_rollers.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("5_eqs_struct.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Вспомогательные функции
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill(rho) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rho(i) := l*cos(q[3 + i]) - r $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
free_wheel_num(s) := floor((s - 1)/(n_rollers - 1)) $
free_roller_num(s) := mod(s - 1, n_rollers - 1) + 2 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst_chis_and_kappas(expr) := expr where append(
    makelist(chi[i] = q[3 + i], i, 1, N_wheels),
    makelist((chi + kappa)[s] = q[3+free_wheel_num(s)] + kappa[free_roller_num(s)], s, 4, dof),
    makelist(chi[s] = q[3+free_wheel_num(s)], s, 4, dof)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
checkable(expr) := ev(
    ev(expr, sum) where [ 
        subst_chis_and_kappas
    ]
, nouns) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* so that we could diff exprs of i and s */
for var in [
    chii,
    kappa_chi_s,
    chi,
    rho,
    nu,
    nu_s
] do depends(var, t) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
diffable(expr) := expr where [ 
    'rho(i) = l*cos(chi[i]) - r,
    chi[i] = chii,
    (kappa + chi)[s] = kappa_chi_s
] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
do_diff(expr) := diff(
        expr where [
            'rho(i) = rho[i],
            'nu[s] = nu_s[s],
            (kappa + chi)[s] = kappa[s] + chi[s]
        ]
    , t) where [ 
    rho[i] = 'rho(i),
    nu_s[s] = 'nu[s],
    kappa[s] + chi[s] = (kappa + chi)[s]
] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
summable(expr) := expr where [ chii = 'q[3 + i] ] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
do_check(original, pretty) := (checkable(pretty) - original) where [ expand, ratsimp ] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
compare_terms(pretty, original) := lsum(term, term, map(factor, 
    expr_to_terms(expand(
        checkable(summable(
            pretty
        ))
    ))
))
-
lsum(term, term, map(factor, 
    expr_to_terms(
        original
    )
)) 
$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ok_or_error(expected, actual, difference) := if actual = expected then "OK" else error(concat("PRETTY IS NOT EQUAL TO ORIGINAL! DIFF = ", difference(actual))) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
zero_or_error(actual) := ok_or_error(0, actual, lambda([expr], expr)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
check(original, pretty) := ok_or_error(0, do_check(original, pretty), lambda([expr], expr)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
check123(original, pretty) := block([result],
    result: makelist(do_check(original[i], pretty[i]), i, 1, 3),
    ok_or_error(makelist(0, i, 1, 3), result, simplode(result, ", "))
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expr_to_terms(expr) := block([terms],
    terms: [],
    for term in expr do terms: cons(term, terms),
    terms
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Реалистичные параметры
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
N_wheels: 3 $
n_rollers: 4 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
nus: [ nu1, nu2, nu3 ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
chis: [ chi1, chi2, chi3 ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
adjust(chi) := mod(chi - _chi_max_adjust, 2*_chi_max_adjust) - _chi_max_adjust;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ultimate_params(N_wheels, n_sharp_rollers) := block([
        n_rollers, /* actual n rollers - the number we should have when we cut rollers */
        r, /*  radius of hub (dist from wheel axis to roller axis) */
        _chi_max_geom, /* half roller width angle if it were to have sharp ends */
        l, /* radius of wheel (distance from axis to ground) */
        I_S, /* total moi wrt vert axis */
        I_0_S, /* moi of platf and hubs wrt vert axis */
        A, /* moi roller wrt orthogonal axis */
        B, /* moi roller wrt roller axis */
        R, /* platform radius */
        m, /* roller mass */
        M_platf,
        M_hub,
        r_roller_moi,
        h_roller_moi,
        _chi_max_adjust, /* value of chi on which rollers switch - i.e. border of cut roller */
        J_0, /* moi hub wrt wheel axis */
        M /* total mass */
    ],
    n_rollers: n_sharp_rollers + 1,
    r: 0.05,
    m: 0.05,
    R: 0.15,
    M_platf: 1,
    M_hub: 0.15,
    _chi_max_geom: %pi/(n_rollers - 1),
    l: r / cos(_chi_max_geom),
    I_0_S: M_platf*R^2/2 + N_wheels*(M_hub*R^2 + M_hub/12*(3*r^2 + 0.01^2)),
    r_roller_moi: (l - r)/2,
    _chi_max_adjust: %pi/n_rollers,
    h_roller_moi: 2*l*sin(_chi_max_adjust),
    A: 1/12 * m * (3*r_roller_moi^2 + h_roller_moi^2),
    B: (m*r_roller_moi^2)/2,
    I_S: I_0_S + N_wheels*n_rollers*((A+B)/2+m*R^2+m*r^2/2),
    J_0: (M_hub*r^2)/2,
    M: M_platf + N_wheels*M_hub + N_wheels*n_rollers*m,
    append(
        [ sin(theta)^2*'M*'R^2=1-cos(theta)^2*'M*'R^2 ], /* just in case some symbolic math systems don't handle this */
        flatten(makelist([
            alpha[i] = 2*%pi/N_wheels*(i-1),
            chis[i] = adjust(chis[i])
        ], i, 1, N_wheels)),
        makelist(
            kappa[i] = 2*%pi/n_sharp_rollers*(i-1)
        , i, 1, n_sharp_rollers),
        [
            '_chi_max_adjust = _chi_max_adjust,
            'B = float(B),
            'R = R,
            'l = l,
            J = float(J_0 + n_rollers*(A+m*r^2)),
            'Lambda = float(I_S / (M*l^2)), /* dimensionless parameter defined as in paper */
            'I_S = float(I_S),
            'M = M,
            'r = r
        ]
    )
) $
for param in ultimate_params(N_wheels, n_rollers) do print(param) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_chi_max_adjust;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_chi_max_adjust: '_chi_max_adjust where ultimate_params(N_wheels, n_rollers);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
real_M_star():=_M_star_3 where ultimate_params(N_wheels, n_rollers) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kin_energy(nu_list,chi_list,real_M_star):=float((nu_list . real_M_star . transpose(nu_list)) where [chis[1]=chi_list[1]
,chis[2]=chi_list[2],chis[3]=chi_list[3]]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Уравнения без роликов
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
old_eqs_explicit: solve(
    makelist(old_eq(i), i, 1, 3),
    makelist(diff(nu[i], t), i, 1, 3)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_rhss_explicit: (map(second, old_eqs_explicit[1])) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_rhs_coords: transpose((submatrix(4, 5, 6, _old_V) . genmatrix(lambda([i, j], nu[i]), 3, 1)) where [ theta = _theta ])[1] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    x_0, y_0, _theta_0,
    t0, t1, t_step
) := rk(
    append(old_rhss_explicit, old_rhs_coords) where params(N_wheels, n_rollers),
    [ nu1,   nu2,   nu3,   x,   y,   _theta   ],
    [ nu1_0, nu2_0, nu3_0, x_0, y_0, _theta_0 ],
    [ t, t0, t1, t_step]
) $

old_omni_solve(
    nu1_0, nu2_0, nu3_0, 
    t1, t_step
) := old_omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    0, 0, 0, 
    0, t1, t_step
) $

old_omni_solve_next(sol, t1) := block([last_point],
    last_point: last(sol),
    old_omni_solve_extended(
        last_point[2], last_point[3], last_point[4], 
        last_point[5], last_point[6], last_point[7], 
        last_point[1], t1, (last_point[1] - first(sol)[1])/(length(sol) - 1)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
для интегрирования можно использовать вот это:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
tmp: old_omni_solve(
    1, 1, 1,
    10, 0.01
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_allowed: true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
plot(
    [
        [discrete, makelist([(tmp[i])[5], (tmp[i])[6]], i, 1, 45000/2)],
        [discrete, makelist([tmp[i+100][5], tmp[i+100][6]], i, 1, 45000/2)]
        [discrete, makelist([tmp[i][5] - tmp[i+50][5], tmp[i][6] - tmp[i+50][6]], i, 1, 45000/2)]
    ]
    , "trajectory"
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Уравнения с роликами
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
уравнения движения, разрешенные относительно d(nu)/dt, имеют вид:

d(nu[alpha])/dt = M*^(-1) * ( -d(M*)/dt.nu - { P[alpha], L* } + { P[alpha], nu[mu]*P[mu] } )
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
интегрировать будем только первые три уравнения, и то при nu[s] = 0
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_M_star_3: genmatrix(lambda([i, j], _M_star[i][j]), 3, 3) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_M_star_3_inverse: invert(_M_star_3) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
nu_3: makelist(nu[i], i, 1, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_V_chi: genmatrix(lambda([i,j], _V[3+i, j]), N_wheels, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_M_star_dt_dot_nu: (sum(diff(_M_star_3, q[3+i]) * _V_chi[i] . nu_3, i, 1, N_wheels)) . nu_3 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois_P_L_star: transpose(makelist(
    pois(_P[i], L_star, z) where append(
        subst_ps
    )
, i, 1, 3)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
sum_pois_P_alpha_P_mu_nu_mu: transpose(makelist(sum(nu[mu] * pois(_P[i], _P[mu], z), mu, 1, 3) where append(
    subst_ps,
    [ theta = 0 ] /* easiest way to make Maxima handle sin^2 + cos^2 */
), i, 1, 3)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rhs_nu_noinvert: (-D_M_star_dt_dot_nu - pois_P_L_star + sum_pois_P_alpha_P_mu_nu_mu)
/* free rollers won't be integrated */
where makelist(nu[i] = 0, i, 4, dof) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* too huge, don't try to print - will read Maxima output forever */
rhs_nu_explicit: _M_star_3_inverse . rhs_nu_noinvert $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
listofvars(rhs_nu_explicit);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rhs_nu: transpose(rhs_nu_explicit)[1] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eqs_nu_explicit: makelist(
    diff(nu[i], t) = rhs_nu_explicit[i][1]
, i, 1, 3) where append(
    makelist(nu[i] = 0, i, 4, dof),
    makelist(q[3+i] = adjust(q[3+i]), i, 1, N_wheels)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
для решения необходимо добавить уравнения связей на chi:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
rhs_chi: makelist((_V . nu)[i][1], i, 4, 3 + N_wheels);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eqs_chi_explicit: makelist(diff(q[3+i], t) = rhs_chi[i], i, 1, N_wheels);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
также добавим уравнения для координат экипажа: x, y, theta:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
rhs_coords: makelist((_V . nu)[i][1], i, 1, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eqs_coords_explicit: makelist(diff(q[i], t) = rhs_coords[i], i, 1, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
итого:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
all_the_rhss: (append(rhs_nu, rhs_chi, rhs_coords) where ultimate_params(N_wheels, n_rollers)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
new_omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    chi1_0, chi2_0, chi3_0, 
    x_0, y_0, _theta_0,
    t0, t1, t_step
) := rk(
    all_the_rhss,
    [ nu1,   nu2,   nu3,   chi1,   chi2,   chi3,   x,   y,   theta    ],
    [ nu1_0, nu2_0, nu3_0, chi1_0, chi2_0, chi3_0, x_0, y_0, _theta_0 ],
    [ t, t0, t1, t_step]
) $

new_omni_solve(
    nu1_0, nu2_0, nu3_0, 
    t1, t_step
) := new_omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    0, 0, 0,
    0, 0, 0, 
    0, t1, t_step
) $

new_omni_solve_next(sol, t1) := block([last_point],
    last_point: last(sol),
    omni_solve_extended(
        last_point[2], last_point[3], last_point[4], 
        last_point[5], last_point[6], last_point[7], 
        last_point[8], last_point[9], last_point[10], 
        last_point[1], t1, (last_point[1] - first(sol)[1])/(length(sol) - 1)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Решения
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
showtime: true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_allowed: true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Вокруг своей оси
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Без роликов
   [wxMaxima: subsect end   ] */

/* [wxMaxima: subsect start ]
С роликами
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
tmp1: new_omni_solve(
    0, 0, 1,
    1, 0.01
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_theta(tmp1) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
По прямой
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Без роликов
   [wxMaxima: subsect end   ] */

/* [wxMaxima: subsect start ]
С роликами
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
tmp2: new_omni_solve(
    1, 0, 0,
    1, 0.01
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(tmp2) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_nu12(tmp2) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en(tmp2) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
С закруткой
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Без роликов
   [wxMaxima: subsect end   ] */

/* [wxMaxima: subsect start ]
С роликами
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
tmp3: new_omni_solve(
    1, 0, 1,
    5, 0.01
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(tmp3) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_nu12(tmp3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en(tmp3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_chi(tmp3);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
