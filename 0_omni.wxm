/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: title   start ]
Экипаж с роликонесущими колесами
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
Полученные результаты
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Вспомогательные файлы
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
batchload("helper.mac") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Формула для кинетической энергии (не используется нигде, только для проверки человеком):
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/* batchload("1_kin_en.wxm") $ */
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Вывод уравнений движения
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("2_eqs.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Реальные параметры
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("3_sol/1_params.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Функции для численного решения
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("3_sol/2_num_int.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Функции для построения графиков
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("3_sol/3_plot.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Эксперименты
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
На месте, вокруг своей оси, по прямой
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("4_exp/1_simple.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
С закруткой
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("4_exp/2_wrench.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
С более сильной закруткой
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("4_exp/3_hard_wrench.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
С закруткой и пятью перекрывающимися роликами
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("4_exp/4_wrench_5_rol.wxm") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Следующие шаги
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
ПОСЧИТАТЬ ЭНЕРГИЮ РЯДОМ !!! ДОЛЖНА БЫТЬ CONST
И ЛИНЕЙНЫЙ ИНТЕГРАЛ ИЗ НЕГОЛОНОМНОЙ СИСТЕМЫ
CHI_MAX - БОЛЬШЕ РОЛИКОВ (8, 9) (и вообще, сойдемся ли к неголоном???)
СООБРАЗИТЬ ЧТО ЗНАЧИТ МОМЕНТ ИНЕРЦИИ
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Реалистичные параметры
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
/*
plot_allowed: true $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_chi_max: %pi/4 $
_chi_max_adjust: %pi/5 $

real_params: [
    alpha[1] = 0,
    alpha[2] = 2*%pi/3,
    alpha[3] = 4*%pi/3,
    R = 0.15,
    B = 6.25*1e-7,
    Lambda = 1, /* should not matter as it is a helper parameter */

    /* wheel geometry */
    chi_max = _chi_max,
    l = 0.05*sqrt(2),
    
    /* mass */
    M = 2.05,
    J = 8.0391*1e-4,
    I_S = 0.02567,

    theta = 0 /* looks like theta only appears as part of sin^2(theta) + cos^2(theta)
                 (ONLY IN EQUATIONS FOR nu[i] and chi[i])
                 which Maxima fails to replace with 1 without trigsimp */
];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Кинетическая энергия и линейный интеграл
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Кинетическая энергия, вычисленная на adjust(chi) (агрегат из chi, как в уравнениях),
получается ступенчатая из-за нашего способа перехода между роликами.
Для интереса заведём функцию, вычисляющую к.э. без adjust.

ВАЖНО! 

Такая энергия может обращаться в бесконечность, судя по всему, поэтому в неё ещё добавим min(?, en), где ? - волшебное число.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
real_M_star : subst_stuff(transpose(_V) . _M . _V) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kin_energy_no_adjust(nu_list, chi_list) := (nu_list . real_M_star . transpose(nu_list)) where [
    chi[1] = (chi_list[1]),
    chi[2] = (chi_list[2]),
    chi[3] = (chi_list[3])
] $
kin_en_no_adjust(sol_pt) := kin_energy_no_adjust([ sol_pt[2], sol_pt[3], sol_pt[4] ], [ sol_pt[5], sol_pt[6], sol_pt[7] ]) $
plot_kin_en_no_adjust(sol) := plot (
    [
        [discrete,makelist([p[1],min(1, kin_en_no_adjust(p))],p,sol)]
    ]
    , "kin energy no adjust"
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kinda_lin_integral(nu_list, chi_list) := diff([nu1, nu2, nu3] . real_M_star . transpose([nu1, nu2, nu3]), nu3) where [
    nu1 = nu_list[1],
    nu2 = nu_list[2],
    nu3 = nu_list[3],
    chi[1] = adjust(chi_list[1]),
    chi[2] = adjust(chi_list[2]),
    chi[3] = adjust(chi_list[3])
] $
kinda_lin_int(sol_pt) := kinda_lin_integral([ sol_pt[2], sol_pt[3], sol_pt[4] ], [ sol_pt[5], sol_pt[6], sol_pt[7] ]) $
plot_kinda_lin_int(sol) := plot (
    [
        [discrete,makelist([p[1],kinda_lin_int(p)],p,sol)]
    ]
    , "linear integral ?"
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
С закруткой
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
load("wrench_realistic.lisp") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_wrench_2__10_realistic: omni_solve_next(sol_wrench_0__2_realistic, 10) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_wrench_0__10_realistic: append(sol_wrench_0__2_realistic, sol_wrench_2__10_realistic) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
save(
    "wrench_realistic.lisp",
    sol_wrench_0__10_realistic
);
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(sol_wrench_0__10_realistic) $
plot_theta(sol_wrench_0__10_realistic) $
plot_chi(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_theta(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_xy(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en_no_adjust(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_chi(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kinda_lin_int(sol_wrench_0__10_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
С сильной закруткой
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
load("hard_wrench_realistic.lisp") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_hard_wrench_0__2_realistic: omni_solve(
    1, 0, -2, 
    2, 0.01
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_hard_wrench_2__10_realistic: omni_solve_next(sol_hard_wrench_0__2_realistic, 10) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_hard_wrench_realistic: append(
    sol_hard_wrench_0__2_realistic
/////////    , sol_hard_wrench_2__10_realistic
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
save(
    "hard_wrench_realistic.lisp",
    sol_hard_wrench_realistic
);
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(sol_hard_wrench_realistic) $
plot_theta(sol_hard_wrench_realistic) $
plot_chi(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_theta(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_xy(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en_no_adjust(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_chi(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kinda_lin_int(sol_hard_wrench_realistic) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
С сильной закруткой и движением по двум координатам
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
load("hard_wrench_realistic_diag.lisp") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_hard_wrench_0__2_realistic_diag: omni_solve(
    1, 1, -2, 
    2, 0.01
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_hard_wrench_2__10_realistic_diag: omni_solve_next(sol_hard_wrench_0__2_realistic_diag, 10) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_hard_wrench_realistic_diag: append(
    sol_hard_wrench_0__2_realistic_diag
/////////    , sol_hard_wrench_2__10_realistic_diag
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
save(
    "hard_wrench_realistic_diag.lisp",
    sol_hard_wrench_realistic_diag
);
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(sol_hard_wrench_realistic_diag) $
plot_theta(sol_hard_wrench_realistic_diag) $
plot_chi(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_trajectory(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_theta(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_xy(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en_no_adjust(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_chi(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kinda_lin_int(sol_hard_wrench_realistic_diag) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Что там с энергией ?
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
матрица кин. энергии в псевдоскоростях:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
real_M_star;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
псевдоскорости:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
nus: transpose([ nu[1], nu[2], nu[3] ]) ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
сама энергия:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T: 1/2 * (transpose(nus) . real_M_star . nus) ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
рассмотрим движение по прямой на длительном промежутке времени:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
sol_straight_long.lisp") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
sol_straight_long: omni_solve(
    1, 0, 0, 
    10, 0.01
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
save(
    "sol_straight_long.lisp",
    sol_straight_long
);
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_kin_en(sol_straight_long) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_xy(sol_straight_long) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
неправильная энергия (не учитывающая, что nu != const)
обратим внимание на плавный характер изменения этой величины между пиками
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T_straight(_chi) := T where [
    nu[1] = 1,
    nu[2] = 0,
    nu[3] = 0,
    chi[1] = 0,
    chi[2] = _chi,
    chi[3] = -_chi
], numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
doPlot("energy assuming nu=const", [
    lambda([p], T_straight(adjust(_chi2(p))))
], sol_straight_long) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
отнормируем графики энергии, nu1 и chi3, чтобы сопоставить
переход между роликами, ступеньку на графике энергии и "угол" на графике скорости:

заметим, как поведение nu похоже на поведение неправильной энергии:
поведение nu компенсирует наличие cos(chi) в выражении для энергии
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T_tmp(p) := T where [
    nu[1] = _nu1(p),
    nu[2] = _nu2(p),
    nu[3] = _nu3(p),
    chi[1] = adjust(_chi1(p)),
    chi[2] = adjust(_chi2(p)),
    chi[3] = adjust(_chi3(p))
] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
sol: makelist(sol_straight_long[i], i, 1, 100) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
doPlot(
   "T normed",
    [ normed(T_tmp, sol) ],
    sol
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
doPlot("normed vals for straight movement", [
    normed(T_tmp, sol),
    normed(_nu1, sol),
    normed(lambda([p], adjust(_chi3(p))), sol)
], sol) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
похоже, скачок энергии связан со сменой направления изменения nu1, т.е. знака правой части,
которая, в свою очередь, происходит, т.к. правая часть стремится к бесконечности
с противоположными знаками при подходе к острию ролика с разных сторон
(что, при укороченных роликах, ограничивается просто сменой знака)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_rhs_nu1(p) := float(subst_stuff(rhs_nu[1][1]) where [
    nu[1] = _nu1(p),
    nu[2] = _nu2(p),
    nu[3] = _nu3(p),
    chi[1] = adjust(_chi1(p)),
    chi[2] = adjust(_chi2(p)),
    chi[3] = adjust(_chi3(p))
]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
doPlot("rhs for nu1", [
    _rhs_nu1
], sol) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
doPlot("rhs for nu1", [
    _rhs_nu1
], sol_straight_long) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
про бесконечность:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_rhs_nu1_noadjust(p) := float(subst_stuff(rhs_nu[1][1]) where [
    nu[1] = _nu1(p),
    nu[2] = _nu2(p),
    nu[3] = _nu3(p),
    chi[1] = _chi1(p),
    chi[2] = _chi2(p),
    chi[3] = _chi3(p)
]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
doPlot("rhs for nu1 noadjust", [
    _rhs_nu1_noadjust
], sol) $
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
