/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: input   start ] */
load("helper.mac");
ratprint: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Структура уравнений
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Покажем, что уравнения для системы с роликами отличаются от уравнений без роликов
аддитивным членом порядка момента инерции ролика в правой части (до разрешений относительно псевдоскоростей):
M* Dnu = f(nu, chi) + B*g(nu, chi)
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Координаты и геометрия
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
N_wheels: 3 $
n_rollers: 4 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
n_free_rollers: N_wheels * (n_rollers - 1) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
phis: append(
    makelist(concat(phi, i, "_1"), i, 1, N_wheels),
    flatten(makelist(makelist(concat(phi, i, "_", j), j, 2, n_rollers), i, 1, N_wheels))
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
q: append(
    [ x, y, theta ],
    makelist(concat(chi, i), i, 1, N_wheels),
    phis
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
n_coords: length(q);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in q do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wheel_num(n) := floor(n / n_rollers) + 1 $
roller_num(n) := mod(n, n_rollers) + 1 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Связи и псевдоскорости
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
kill(nu) $
nu: makelist(concat(nu, i), i, 1, 3 + n_free_rollers);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in nu do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dof: length(nu);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rho: makelist(l*cos(concat(chi, i)) - r, i, 1, N_wheels);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
constraints: append(
    [
        diff(x, t) = R*cos(theta)*nu1 - R*sin(theta)*nu2,
        diff(y, t) = R*sin(theta)*nu1 + R*cos(theta)*nu2,
        diff(theta, t) = 1/Lambda * nu3
    ],
    makelist(
        diff(concat(chi, i), t) = R/l*sin(alpha[i])*nu1 - R/l*cos(alpha[i])*nu2 - R/(l*Lambda)*nu3,
        i, 1, N_wheels
    ),
    makelist(
        diff(concat(phi, i, "_1"), t) = R/rho[i]*cos(alpha[i])*nu1 + R/rho[i]*sin(alpha[i])*nu2,
        i, 1, N_wheels
    ),
    makelist(
        diff(phis[3 + i], t) = nu[3 + i],
        i, 1, n_free_rollers
    )
) $
for constraint in constraints do print(constraint) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_V: genmatrix(lambda([i,j],
    diff(second(constraints[i]), nu[j])
), n_coords, 3 + n_free_rollers);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Кинетическая энергия
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
(tmp_free_roller_indices: makelist(i, i, 0, (n_rollers - 1) * N_wheels - 1)) = "free rollers";
makelist(floor(m/(n_rollers - 1)) + 1, m, tmp_free_roller_indices) = "chi";
makelist(mod(m, n_rollers - 1) + 2, m, tmp_free_roller_indices) = "kappa";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_M: genmatrix(lambda([i,j], 
    if i = j then
        if i <= 2 then M
        else if i = 3 then I_S
        else if i <= 3 + N_wheels then J
        else B
    else if (i = 3 and j > 3 + N_wheels) or (j = 3 and i > 3 + N_wheels) 
        then if max(i, j) <= 3 + 2 * N_wheels
            then B*sin(
                kappa[1] + 
                concat(chi, max(i, j) - (3 + N_wheels))
            )
            else B*sin(
                kappa[mod(max(i, j) - (3 + 2 * N_wheels + 1), n_rollers - 1) + 2] + 
                concat(chi, floor((max(i, j) - (3 + 2 * N_wheels + 1))/(n_rollers - 1)) + 1)
            )
    else 0
), n_coords, n_coords);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
T: (q . _M . q) where [ expand ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Лагранжиан со связями
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
_M_star: (transpose(_V) . _M . _V) $
for i:1 thru 2 do _M_star[i][i]: _M_star[i][i] - (sin(theta)^2*M*R^2+cos(theta)^2*M*R^2) + M*R^2 $
_M_star;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
L_star: 1/2 * (nu . _M_star . nu) where [ expand ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
DL_star_nus: makelist(diff(L_star, nu[i]), i, 1, dof) $

/* for i:1 thru dof do print('diff('L_star, nu[i]) = DL_star_nus[i]) $ */
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
DL_star_nus[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
"Импульсы"
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
p: makelist(concat(p, "_", coord), coord, q);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in p do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
P: makelist(concat(P, "_", i), i, 1, dof);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in P do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
'sum('P[i]*'nu[i], i, 1, dof) = 'sum('p[j]*'diff('q[j], t), j, 1, n_coords);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_P: (p . _V)[1] $
for i:1 thru dof do print(P[i] = _P[i]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Скобки Пуассона импульсов
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
z: append(q, p);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Друг с другом
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
/* can't handle x*cos(y)^2 + x*sin(y)^2 = x :( */
pois(_P[1], _P[2], z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_P[1], _P[3], z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_P[2], _P[3], z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* if i or j > 3 - zero */
pois(_P[1], _P[4], z);
pois(_P[4], _P[5], z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_p: transpose(_M . _V . nu)[1] $
subst_ps: makelist(p[i] = _p[i], i, 1, n_coords) $
for it in subst_ps do print(it) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* CAN'T HANDLE SIN(THETA)^2 + COS(THETA)^2 */
pois(_P[2], _P[3], z) where subst_ps;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_P[1], sum(nu[j]*_P[j], j, 1, dof), z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_P[4], sum(nu[j]*_P[j], j, 1, dof), z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
С лагранжианом
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
pois(_P[1], L_star, z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_P[4], L_star, z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Уравнения движения
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
eq(i) := diff(DL_star_nus[i], t) = (-pois(_P[i], L_star, z) + pois(_P[i], sum(nu[j]*_P[j], j, 1, dof), z)) where subst_ps;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rhs(i) := (pois(_P[i], -L_star + sum(nu[j]*_P[j], j, 1, dof), z)) where subst_ps;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eq1: eq(1) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rhs1: rhs(1) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Реалистичные параметры
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
params(N_wheels, n_rollers) := block(
    [
        R, r, r_roller_moi,
        M_platf, M_wheel, m,
        _chi_max_adjust, _chi_max_geom, l, h_roller_moi,
        M_0, M,
        A, B, J_0, J, I_0_S, I_S
    ],

/* GIVEN */
    /* geometry, m, rad */
    R: 0.15 ,                            /* radius of platform */
    r: 0.05 ,                            /* radius of wheel */

    /* for moment of inertia calculations, rollers are considered cylinders */
    r_roller_moi: 0.005 ,                     /* 'radius' of roller - quotes due to above line; see h_roller_moi below */

    /* mass, kg */
    M_platf: 1 ,     /* [kg] mass of the platform */
    M_wheel: 0.15 ,  /* [kg] mass of a wheel without rollers */
    m:       0.05 ,  /* [kg] mass of a roller */

/* COMPUTED */
    /* geometry, m, rad */
    _chi_max_adjust: %pi/n_rollers ,          /* angle determining when the switch to next roller happens and its moment of inertia */
    _chi_max_geom: %pi/(n_rollers - 1) ,      /* angle determining roller geometry, but not moment of inertia */
    l: r / cos(_chi_max_geom) ,               /* radius of wheel with roller (distance from wheel axis to floor) */
    h_roller_moi: 2*l*sin(_chi_max_adjust) ,  /* length of roller */

    /* mass, kg */
    M_0: M_platf + N_wheels*M_wheel , /* platform with wheels, but without rollers */
    M:   M_0 + N_wheels*n_rollers*m , /* whole system */

    /* moment of inertia, kg * m^2 */
    A: 1/12 * m * (3*r_roller_moi^2 + h_roller_moi^2) ,  /* roller wrt wheel axis */
    B: (m*r_roller_moi^2)/2 ,                            /* roller wrt roller axis */
    J_0: (M_wheel*r^2)/2 ,                               /* wheel without rollers wrt wheel axis */
    J: J_0 + n_rollers*(A + m*r^2) ,                     /* wheel with rollers wrt wheel axis */
    I_0_S: (M_platf*R^2)/2 ,                             /* platform wrt platform axis */
    I_S: I_0_S + 6*B + 6*A + 12*R^2*m + 6*r^2*m ,        /* whole system wrt platform axis */

    append(
        [ 'M = M, 'R = R, 'J = J, 'r = r, 'Lambda = sqrt(I_S / (M * r^2)), 'l = l ],
        makelist(alpha[i] = (i - 1) * 2*%pi/N_wheels, i, 1, N_wheels),
        makelist(kappa[j] = (j - 1) * 2 * _chi_max_adjust, j, 1, n_rollers)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
params(N_wheels, n_rollers);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
eq1B: eq1 where params(N_wheels, n_rollers);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
