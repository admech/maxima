/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: input   start ] */
load("helper.mac");
ratprint: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Структура уравнений без роликов
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Покажем, что уравнения для системы с роликами отличаются от уравнений без роликов
аддитивным членом порядка момента инерции ролика в правой части (до разрешений относительно псевдоскоростей):
M* Dnu = f(nu, chi) + B*g(nu, chi)
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Координаты и геометрия
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
N_wheels: 3 $
/* n_rollers - for mass and geometry parameters' calculations */
n_rollers: 4 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_q: append(
    [ x, y, theta ],
    makelist(concat(chi, i), i, 1, N_wheels)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_n_coords: length(old_q);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in old_q do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_wheel_num(n) := floor(n / n_rollers) + 1 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Связи и псевдоскорости
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
kill(old_nu) $
old_nu: makelist(concat(nu, i), i, 1, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in old_nu do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_dof: length(old_nu);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rho: makelist(l*cos(concat(chi, i)) - r, i, 1, N_wheels);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_constraints: append(
    [
        diff(x, t) = R*cos(theta)*nu1 - R*sin(theta)*nu2,
        diff(y, t) = R*sin(theta)*nu1 + R*cos(theta)*nu2,
        diff(theta, t) = 1/Lambda * nu3
    ],
    makelist(
        diff(concat(chi, i), t) = R/l*sin(alpha[i])*nu1 - R/l*cos(alpha[i])*nu2 - R/(l*Lambda)*nu3,
        i, 1, N_wheels
    )
) $
for constraint in old_constraints do print(constraint) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_old_V: genmatrix(lambda([i,j],
    diff(second(old_constraints[i]), old_nu[j])
), old_n_coords, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Кинетическая энергия
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
_old_M: genmatrix(lambda([i,j], 
    if i = j then
        if i <= 2 then M
        else if i = 3 then I_S
        else J
    else 0
), old_n_coords, old_n_coords);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_T: (old_q . _old_M . old_q) where [ expand ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Лагранжиан со связями
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
_old_M_star: (transpose(_old_V) . _old_M . _old_V) $
for i:1 thru 2 do _old_M_star[i][i]: _old_M_star[i][i] - (sin(theta)^2*M*R^2+cos(theta)^2*M*R^2) + M*R^2 $
_old_M_star;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_L_star: 1/2 * (old_nu . _old_M_star . old_nu) where [ expand ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_DL_star_nus: makelist(diff(old_L_star, old_nu[i]), i, 1, old_dof) $

/* for i:1 thru old_dof do print('diff('old_L_star, old_nu[i]) = old_DL_star_nus[i]) $ */
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_DL_star_nus[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
"Импульсы"
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
old_p: makelist(concat(p, "_", coord), coord, old_q);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in old_p do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_P: makelist(concat(P, "_", i), i, 1, old_dof);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for var in old_P do depends(var, t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
'sum('P[i]*'nu[i], i, 1, old_dof) = 'sum('p[j]*'diff('q[j], t), j, 1, old_n_coords);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_old_P: (old_p . _old_V)[1] $
for i:1 thru old_dof do print(P[i] = _old_P[i]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Скобки Пуассона импульсов
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
old_z: append(old_q, old_p);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Друг с другом
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
/* can't handle x*cos(y)^2 + x*sin(y)^2 = x :( */
pois(_old_P[1], _old_P[2], old_z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_old_P[1], _old_P[3], old_z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_old_P[2], _old_P[3], old_z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_old_p: transpose(_old_M . _old_V . old_nu)[1] $
old_subst_ps: makelist(old_p[i] = _old_p[i], i, 1, old_n_coords) $
for it in old_subst_ps do print(it) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(pois(_old_P[1], _old_P[3], old_z) where old_subst_ps) where [ expand, trigsimp ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
(pois(_old_P[2], _old_P[3], old_z) where old_subst_ps) where [ expand, trigsimp ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
pois(_old_P[1], sum(old_nu[j]*_old_P[j], j, 1, old_dof), old_z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
С лагранжианом
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
pois(_old_P[1], old_L_star, old_z);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Уравнения движения
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
old_eq(i) := diff(old_DL_star_nus[i], t) = ((-pois(_old_P[i], old_L_star, old_z) + pois(_old_P[i], sum(old_nu[j]*_old_P[j], j, 1, old_dof), old_z)) where old_subst_ps) where [ expand, trigsimp ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_rhs(i) := ((pois(_old_P[i], -old_L_star + sum(old_nu[j]*_old_P[j], j, 1, old_dof), old_z)) where old_subst_ps) where [ expand, trigsimp ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_eq1: old_eq(1) ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
makelist(old_rhs(i), i, 1, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Реалистичные параметры
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
params(N_wheels, n_rollers) := block(
    [
        R, r, r_roller_moi,
        M_platf, M_wheel, m,
        _chi_max_adjust, _chi_max_geom, l, h_roller_moi,
        M_0, M,
        A, B, J_0, J, I_0_S, I_S
    ],

/* GIVEN */
    /* geometry, m, rad */
    R: 0.15 ,                            /* radius of platform */
    r: 0.05 ,                            /* radius of wheel */

    /* for moment of inertia calculations, rollers are considered cylinders */
    r_roller_moi: 0.005 ,                     /* 'radius' of roller - quotes due to above line; see h_roller_moi below */

    /* mass, kg */
    M_platf: 1 ,     /* [kg] mass of the platform */
    M_wheel: 0.15 ,  /* [kg] mass of a wheel without rollers */
    m:       0.05 ,  /* [kg] mass of a roller */

/* COMPUTED */
    /* geometry, m, rad */
    _chi_max_adjust: %pi/n_rollers ,          /* angle determining when the switch to next roller happens and its moment of inertia */
    _chi_max_geom: %pi/(n_rollers - 1) ,      /* angle determining roller geometry, but not moment of inertia */
    l: r / cos(_chi_max_geom) ,               /* radius of wheel with roller (distance from wheel axis to floor) */
    h_roller_moi: 2*l*sin(_chi_max_adjust) ,  /* length of roller */

    /* mass, kg */
    M_0: M_platf + N_wheels*M_wheel , /* platform with wheels, but without rollers */
    M:   M_0 + N_wheels*n_rollers*m , /* whole system */

    /* moment of inertia, kg * m^2 */
    A: 1/12 * m * (3*r_roller_moi^2 + h_roller_moi^2) ,  /* roller wrt wheel axis */
    B: (m*r_roller_moi^2)/2 ,                            /* roller wrt roller axis */
    J_0: (M_wheel*r^2)/2 ,                               /* wheel without rollers wrt wheel axis */
    J: J_0 + n_rollers*(A + m*r^2) ,                     /* wheel with rollers wrt wheel axis */
    I_0_S: (M_platf*R^2)/2 ,                             /* platform wrt platform axis */
    I_S: I_0_S + 6*B + 6*A + 12*R^2*m + 6*r^2*m ,        /* whole system wrt platform axis */

    append(
        [ 'M = M, 'R = R, 'J = J, 'r = r, 'Lambda = sqrt(I_S / (M * r^2)), 'l = l, 'I_S = I_S ],
        makelist(alpha[i] = (i - 1) * 2*%pi/N_wheels, i, 1, N_wheels),
        makelist(kappa[j] = (j - 1) * 2 * _chi_max_adjust, j, 1, n_rollers)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
params(N_wheels, n_rollers);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_eqs: makelist(old_eq(i) where params(N_wheels, n_rollers), i, 1, 3) $
for _eq in old_eqs do print(_eq) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_eqs_explicit: solve(
    makelist(old_eq(i), i, 1, 3),
    makelist(diff(old_nu[i], t), i, 1, 3)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_rhss_explicit: (map(second, old_eqs_explicit[1])) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_rhs_coords: transpose((submatrix(4, 5, 6, _old_V) . genmatrix(lambda([i, j], old_nu[i]), 3, 1)) where [ theta = _theta ])[1] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_rhss: append(old_rhss_explicit, old_rhs_coords) where params(N_wheels, n_rollers);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
old_omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    x_0, y_0, _theta_0,
    t0, t1, t_step
) := rk(
    old_rhss,
    [ nu1,   nu2,   nu3,   x,   y,   _theta   ],
    [ nu1_0, nu2_0, nu3_0, x_0, y_0, _theta_0 ],
    [ t, t0, t1, t_step]
) $

old_omni_solve(
    nu1_0, nu2_0, nu3_0, 
    t1, t_step
) := old_omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    0, 0, 0, 
    0, t1, t_step
) $

old_omni_solve_next(sol, t1) := block([last_point],
    last_point: last(sol),
    old_omni_solve_extended(
        last_point[2], last_point[3], last_point[4], 
        last_point[5], last_point[6], last_point[7], 
        last_point[1], t1, (last_point[1] - first(sol)[1])/(length(sol) - 1)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
пример интегрирования и построения графика:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/*
circle: old_omni_solve(
    1, 0, 1,
    250, 0.01
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
batchload("3_sol/3_plot.wxm") ;
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
plot_allowed: true;
*/
print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
plot(
    [
        [discrete, makelist([p[5], p[6]], p, circle)]
    ]
    , "trajectory"
) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
