/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: comment start ]
1) Чтобы каждый график строился в новом окне, нужно вписать
set terminal qt n
в gnuplot_preamble, где n - номер нового окна.

2) Чтобы все графики сразу не появлялись при перезапуске всех ячеек, заведем флаг plot_allowed.

3) Чтобы у окон были заголовки, в преамбулу нужно добавить "set terminal qt title 'my_title'"

4) Чтобы эти пункты работали, заведем свою функцию plot и будем везде пользоваться ей
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
qt_term_counter: 0 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
next_qt_term() := qt_term_counter: qt_term_counter + 1 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_allowed: false $
print("Remember to set plot_allowed: true prior to plotitng") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* makes gnuplot use same scale on both axes */
plot_same_ratio: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_with_postamble(what, title, postamble) := if plot_allowed then block([term_id],
    term_id: next_qt_term(),
    plot2d (
        what
        , (if listp(get_plot_option(gnuplot_out_file)) then [gnuplot_term, ps] else [gnuplot_preamble, concat(
            "set terminal qt ", term_id, " title '", term_id, " - ", title, "';")])
        , [gnuplot_postamble, postamble ]
    )
) else print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot(what, title) := plot_with_postamble(what, title, "") $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_t(p) := p[1] $
_nu1(p) := p[2] $
_nu2(p) := p[3] $
_nu3(p) := p[4] $
_chi1(p) := p[5] $
_chi2(p) := p[6] $
_chi3(p) := p[7] $
_x(p) := p[8] $
_y(p) := p[9] $
_theta(p) := p[10] $
_phi1(p) := p[11] $
_phi2(p) := p[12] $
_phi3(p) := p[13] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
doPlot(title, vals, sol) := if plot_allowed then plot(
    makelist(
        [discrete, makelist([p[1], val(p)], p, sol)]
    , val, vals)
    , title
) else print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
заведем отдельные функции для построения графиков величин
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
plot_chi(sol) := plot (
    [
        [discrete,makelist([p[1],adjust(p[5])],p,sol)],
        [discrete,makelist([p[1],adjust(p[6])],p,sol)],
        [discrete,makelist([p[1],adjust(p[7])],p,sol)],
        [discrete,makelist([p[1],%pi/4],p,sol)],
        [discrete,makelist([p[1],-%pi/4],p,sol)]
    ]
    , "chi"
) $

plot_coords(sol) := plot (
    [
        [discrete,makelist([p[1],p[8]],p,sol)],
        [discrete,makelist([p[1],p[9]],p,sol)],
        [discrete,makelist([p[1],p[10]],p,sol)]
    ]
    , "X, Y and theta"
) $

plot_trajectory(sol) := plot_with_postamble (
    [
        [discrete,makelist([p[8],p[9]],p,sol)]
    ]
    , "trajectory"
    , "set size ratio -1;"
) $

plot_xy(sol) := plot (
    [
        [discrete,makelist([p[1],p[8]],p,sol)],
        [discrete,makelist([p[1],p[9]],p,sol)]
    ]
    , "X and Y"
) $

plot_theta(sol) := plot (
    [
        [discrete,makelist([p[1],p[10]],p,sol)]
    ]
    , "theta"
) $

plot_nu12(sol) := plot (
    [
        [discrete,makelist([p[1],p[2]],p,sol)],
        [discrete,makelist([p[1],p[3]],p,sol)]
    ]
    , "nu1 and nu2"
) $

plot_nu3(sol) := plot (
    [
        [discrete,makelist([p[1],p[4]],p,sol)]
    ]
    , "nu3"
) $

plot_all(sol) := plot (
    makelist(
        [discrete,makelist([p[1],p[i]],p,sol)],
        i, 2, 10
    )
    , "all vars"
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
для проверки нам также будет полезно строить графики кинетической энергии от времени:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
real_M_star() := ((transpose(_V) . _M . _V) where [
    subst_stuff
]) $

kin_energy(nu_list, chi_list, real_M_star) := (nu_list . real_M_star . transpose(nu_list)) where [
    chi[1] = adjust(chi_list[1]),
    chi[2] = adjust(chi_list[2]),
    chi[3] = adjust(chi_list[3])
] $

kin_en(sol_pt, real_M_star) := kin_energy([ sol_pt[2], sol_pt[3], sol_pt[4] ], [ sol_pt[5], sol_pt[6], sol_pt[7] ], real_M_star) $

plot_kin_en(sol) := if plot_allowed then block([_real_M_star, wall_clock_start],
    wall_clock_start: absolute_real_time(),
        _real_M_star: real_M_star(),
        plot (
        [
            [discrete,makelist([p[1],kin_en(p, _real_M_star)],p,sol)]
        ]
        , "kin energy"
    ),
    print(absolute_real_time() - wall_clock_start)
) else print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Кинетическая энергия, вычисленная на adjust(chi) (агрегат из chi, как в уравнениях),
получается ступенчатая из-за нашего способа перехода между роликами.
Для интереса заведём функцию, вычисляющую к.э. без adjust.

ВАЖНО!

Такая энергия может обращаться в бесконечность, судя по всему,
поэтому в неё ещё добавим min(?, en), где ? - волшебное число.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kin_energy_no_adjust(nu_list, chi_list) := (nu_list . real_M_star() . transpose(nu_list)) where [
    chi[1] = (chi_list[1]),
    chi[2] = (chi_list[2]),
    chi[3] = (chi_list[3])
] $
kin_en_no_adjust(sol_pt) := kin_energy_no_adjust([ sol_pt[2], sol_pt[3], sol_pt[4] ], [ sol_pt[5], sol_pt[6], sol_pt[7] ]) $
plot_kin_en_no_adjust(sol) := if plot_allowed then plot (
    [
        [discrete,makelist([p[1],min(1, kin_en_no_adjust(p))],p,sol)]
    ]
    , "kin energy no adjust"
) else print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kinda_lin_integral(nu_list, chi_list) := diff([nu1, nu2, nu3] . real_M_star() . transpose([nu1, nu2, nu3]), nu3) where [
    nu1 = nu_list[1],
    nu2 = nu_list[2],
    nu3 = nu_list[3],
    chi[1] = adjust(chi_list[1]),
    chi[2] = adjust(chi_list[2]),
    chi[3] = adjust(chi_list[3])
] $
kinda_lin_int(sol_pt) := kinda_lin_integral([ sol_pt[2], sol_pt[3], sol_pt[4] ], [ sol_pt[5], sol_pt[6], sol_pt[7] ]) $
plot_kinda_lin_int(sol) := if plot_allowed then plot (
    [
        [discrete,makelist([p[1],kinda_lin_int(p)],p,sol)]
    ]
    , "linear integral ?"
) else print() $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
для более внимательного изучения графиков полезно отнормировать их так,
чтобы максимальное значение переместилось в 1, а минимальное - в -1:

ЗАМЕЧАНИЕ: normed - это функция, и если поместить её вызов (например, normed(kin_en, sol)) внутрь makelist,
то она (normed) будет вызываться для каждого элемента (и заново проводить нормировку),
поэтому лучше записать значение normed в отдельную функцию и дальше использовать уже её.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
normed(fun, set) := block([_min, _max, _mid, _delta],
    _min: float(lmin(makelist(fun(p), p, set))),
    _max: float(lmax(makelist(fun(p), p, set))),
    _mid: (_max + _min)/2,
    _delta: _max - _min,
    buildq([fun, _mid, _delta], lambda([p], 2 * (fun(p) - _mid) / _delta))
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
чтобы получать из символьных записей функции на решении:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
onsol(expr) := buildq([expr], lambda([p], float(expr where [
    subst_stuff,
    theta = _theta(p),
    nu[1] = _nu1(p),
    nu[2] = _nu2(p),
    nu[3] = _nu3(p),
    chi[1] = adjust(_chi1(p)),
    chi[2] = adjust(_chi2(p)),
    chi[3] = adjust(_chi3(p))
]))) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
примеры для отладки интегрирования и построения графиков:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/* uncomment this cell for neat examples */
/*
do_plot(sol) := plot2d (
    makelist(
        [discrete,makelist([p[1],p[i]],p,sol)],
        i, 2, 3
    ),
    [xlabel,"t"],[ylabel,"y"]
) $
do_plot_xy(sol) := plot2d (
    [
        [discrete,makelist([p[2],p[3]],p,sol)]
    ],
    [xlabel,"t"],[ylabel,"y"]
) $

sol: rk([4-x^2-4*y^2,y^2-x^2+1],[x,y],[-1.25,0.75],[t,0,4,0.02])$
do_plot(sol) $
do_plot_xy(sol) $
*/
print() $
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
