require@omni_no_rollers_params() $
/* require@omni_no_rollers_symbols() $ would be a cyclic dependency */

/* ITERATORS */

/* per_element and per_two_elements are to be accessed only via the adapter methods below, that quote their arguments */
per_element(expr, var, start, finish) := block(
	[ iter_var ],
	if not(atom(var)) then error("var should be an atom, was:", var) else (
		iter_var : concat("per_element_", var),
	    map(ev, makelist(
	        subst(iter_var, var, expr),
	        iter_var,
	        start, finish
	    ))
	)
) $
per_two_elements(expr, outer_var, outer_start, outer_finish, inner_var, inner_start, inner_finish) := block(
	[ outer_iter_var, inner_iter_var ],
	if not(atom(outer_var)) then error("outer_var should be an atom, was:", outer_var) else (
		if not(atom(inner_var)) then error("inner_var should be an atom, was:", inner_var) else (
			outer_iter_var : concat("per_outer_", outer_var),
			inner_iter_var : concat("per_inner_", inner_var),
		    map(ev,
		    	lreduce(append, (
		    		makelist(
				    	makelist(
				        	subst(outer_iter_var, outer_var, subst(inner_iter_var, inner_var, expr)),
				        	inner_iter_var,
				        	inner_start, inner_finish
				    	),
				    	outer_iter_var,
				    	outer_start, outer_finish
				    )
		    	))
		    )
		)
	)
) $

perwheel('expr, var) := per_element(expr, var, 1, params@N_wheels) $
perq('expr, var) := per_element(expr, var, 1, len_q) $
pernu('expr, var) := per_element(expr, var, 1, len_nu) $
perbignu('expr, var) := per_element(expr, var, 1, 3) $

/* NUMERATION */

extract_nu(      i,    coords) := coords[i] $
extract_chi(     i,    coords) := coords[len_nu + i] $
extract_x(             coords) := coords[length(coords) - 2] $
extract_y(             coords) := coords[length(coords) - 1] $
extract_theta(         coords) := coords[length(coords)    ] $

extract_nus(coords)       := pernu(     extract_nu(      i, coords), i) $
extract_big_nus(coords)   := perbignu(  extract_nu(      i, coords), i) $
extract_chis(coords)      := perwheel(  extract_chi(     i, coords), i) $
extract_coords(coords)    := [ extract_x(coords), extract_y(coords), extract_theta(coords) ] $

defstruct(OmniPoint(
	time_point,
	big_nus,
	chis,
	coords
)) $
omni_p(p) := block([c: coords(p)], new(OmniPoint(
	time_point = time(p),
	big_nus = extract_big_nus(c),
	chis = extract_chis(c),
	coords = extract_coords(c)
))) $
omni_c(c) := omni_p(cons(none, c)) $
custom_p_printer(p) := omni_p(p) $
custom_c_printer(c) := omni_c(c) $

