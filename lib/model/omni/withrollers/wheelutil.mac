require@omni_with_rollers_params() $
/* require@omni_with_rollers_symbols() $ would be a cyclic dependency */

/* ITERATORS */

/* per_element and per_two_elements are to be accessed only via the adapter methods below, that quote their arguments */
per_element(expr, var, start, finish) := block(
	[ iter_var ],
	if not(atom(var)) then error("var should be an atom, was:", var) else (
		iter_var : concat("per_element_", var),
	    map(ev, makelist(
	        subst(iter_var, var, expr),
	        iter_var,
	        start, finish
	    ))
	)
) $
per_two_elements(expr, outer_var, outer_start, outer_finish, inner_var, inner_start, inner_finish) := block(
	[ outer_iter_var, inner_iter_var ],
	if not(atom(outer_var)) then error("outer_var should be an atom, was:", outer_var) else (
		if not(atom(inner_var)) then error("inner_var should be an atom, was:", inner_var) else (
			outer_iter_var : concat("per_outer_", outer_var),
			inner_iter_var : concat("per_inner_", inner_var),
		    map(ev,
		    	lreduce(append, (
		    		makelist(
				    	makelist(
				        	subst(outer_iter_var, outer_var, subst(inner_iter_var, inner_var, expr)),
				        	inner_iter_var,
				        	inner_start, inner_finish
				    	),
				    	outer_iter_var,
				    	outer_start, outer_finish
				    )
		    	))
		    )
		)
	)
) $

perwheel('expr, var) := per_element(expr, var, 1, params@N_wheels) $
perroller('expr, var) := per_element(expr, var, 1, params@n_rollers) $
per_free_roller('expr, var) := per_element(expr, var, 2, params@n_rollers) $
pers('expr, free_roller_var) := per_element(expr, free_roller_var, 1, params@N_wheels * (params@n_rollers - 1)) $
pers3('expr, free_roller_var) := per_element(expr, free_roller_var, 4, 3 + params@N_wheels * (params@n_rollers - 1)) $
perq('expr, var) := per_element(expr, var, 1, len_q) $
pernu('expr, var) := per_element(expr, var, 1, len_nu) $
perbignu('expr, var) := per_element(expr, var, 1, 3) $
perfree('expr, wheel_var, roller_var) := per_two_elements(expr, wheel_var, 1, params@N_wheels, roller_var, 2, params@n_rollers) $

/* NUMERATION */

index_of_free_roller(i,j) := 
	params@N_wheels /* skip rollers in contact */
	+ (i-1)*(params@n_rollers-1) /* skip rollers on previous wheels */
	+ j-1 /* start indexing free rollers on the current wheel from 1, not 2 */
$

s(i,j) := 
	3 /* skip big nu */
	+ free_s(i,j)
$

free_s(i,j) :=
      (i-1)*(params@n_rollers-1) /* skip rollers on previous wheels */
	+ j-1 /* start indexing free rollers on the current wheel from 1, not 2 */
$

extract_nu(      i,    coords) := coords[i] $
extract_free_nu( s,    coords) := coords[3 + s] $
extract_chi(     i,    coords) := coords[len_nu + i] $
extract_s_phi(   s,    coords) := coords[len_nu + params@N_wheels + s] $
extract_free_phi(i, j, coords) := extract_s_phi(free_s(i, j), coords) $
extract_x(             coords) := coords[length(coords) - 2] $
extract_y(             coords) := coords[length(coords) - 1] $
extract_theta(         coords) := coords[length(coords)    ] $

extract_nus(coords)       := pernu(     extract_nu(      i, coords), i) $
extract_big_nus(coords)   := perbignu(  extract_nu(      i, coords), i) $
extract_free_nus(coords)  := pers(      extract_free_nu( s, coords), s) $
extract_chis(coords)      := perwheel(  extract_chi(     i, coords), i) $
extract_free_phis(coords) := pers(      extract_s_phi(   s, coords), s) $
extract_coords(coords)    := [ extract_x(coords), extract_y(coords), extract_theta(coords) ] $



/*

	INVERTING _M_star
	(Actually, any matrix of the form:
		[ a11 a12 a13 0      ... 0  ]
		[ a12 a22 a23 0      ... 0  ]
		[ a13 a23 a33 b1     ... bM ]
		[ 0   0   b1  B  0 0 ... 0  ]
		[ 0   0   b2  0  B 0 ... 0  ]
		[             ...           ]
		[             ...           ]
		[             ...           ]
		[ 0   0   bM  0    ...   B  ]
	)

*/

/* helpers */

/* generate identity and zero matrices */
mat_E(n) := genmatrix(lambda([i,j], if i = j then 1 else 0), n) $
mat_0(n,m) := genmatrix(lambda([i,j], 0), n, m) $

/* multiply by this matrix from the left (this . yours) to get yours row n multiplied by mult */
mult_row(mult, n, size) := mat_E(size) + ematrix(size, size, mult - 1, n, n) $

/* add row n multiplied by mult to row m */
add_row(mult, n, m, size) := mat_E(size) + ematrix(size, size, mult, m, n) $

/*
    A function to invert the M* matrix. Copied from 12_1_invert_M_star - see for details.
*/
invert_M(mat) := block(
    [
        size, B, bs,
        step1, step2,
        indices_to_remove, upper_left_corner
    ],

    size: length(mat),
    B: mat[4,4], /* diagonal elements of the lower-right corner */
    bs: makelist(mat[3,i], i, 4, size), /* elements of the third line (row) beyond the upper-left corner */
    indices_to_remove: makelist(i, i, 4, size), /* so as to retain only the upper-left corner */

    /* step 1: eliminate elements of line 3 (the 'bs') beyond the upper-left corner */
    /*         to get a modified state of it needed in step 2                       */
    step1: lreduce(             /* elementary transformations are encoded as matrices below and applied by multiplying by them from the left, */
        lambda([a,b], a.b),     /* so code is executed in reverse order                                                                       */
        append(
            makelist(add_row(-bs[i]/B, i+3, 3, size), i, 1, size-3), /* to do so, add rows starting with 4 multiplied accordingly */
            [ mat ]                                                  /* M* is being used here */
        )
    ),

    /* we'll need to invert it in step 2... */
    upper_left_corner: apply(submatrix, append(indices_to_remove, [step1], indices_to_remove)),

    /* apply transformations to an identity matrix */
    step2: /*ratsimp(*/ /* ratsimp takes LONG for a real matrix */
    lreduce( /* remember, things happen in reverse order */
        lambda([a,b], a.b),
        append(
            makelist(mult_row(1/B, i, size), i, 4, size),            /* last, unscale the lower-right corner */
            makelist(add_row(-bs[i], 3, i+3, size), i, 1, size-3),   /* third, remove column 3 */
            [                                                        /* second, multiply by the inverse upper-left corner */
                mat_fullunblocker(matrix(
                    [ invert(upper_left_corner), mat_0(3,size-3) ],
                    [ mat_0(size-3,3),           mat_E(size-3)   ]
                ))
            ],
            makelist(add_row(-bs[i]/B, i+3, 3, size), i, 1, size-3), /* first, eliminate row 3 again (now for E, not M*) */
            [ mat_E(size) ]
        )
    )
    /*)*/
) $