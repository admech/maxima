require@logging() $
require@plot() $
require@omni_with_rollers_wheelutil() $
require@omni_with_rollers_params() $
require@omni_with_rollers_symbols() $
require@omni_with_rollers_impact() $

init() := block(

  relog : get_logger("recalc", log_level_info),

  recalculate_impacts() := block(
    [ sol_dat_file : concat(sol_dir, "/sol.dat")
    , sol_lisp_file : concat(sol_dir, "/sol.lisp")
    , sol_dat_switches_dat_file : concat(concat(sol_dir, "/sol.dat"), ".switches.dat")
    ],
    relog@info("mesa here!"),

    relog@info("so gonna read sol data points from:", sol_dat_file),
    relog@info("and then dump stuff to:", sol_dat_switches_dat_file),
    relog@info("------------- COMMENCING RECALC -------------------"),
    
    read_file_with_header(file_path) := block(
      relog@info("okay, reading from:", file_path),
      input_stream : openr(file_path),
      first_line : readline(input_stream),
      relog@info("header line:~%", first_line),  

      eof : false,
      current_line_index : 1,
      previous_chis : [ 0, 0, 0 ],
      pre_chi1_index : length(tokens(first_line)) - 2 - params@N_wheels,
      while not(eof) do (
        line : readline(input_stream),
        if line = false then eof : true
        else (
          imlog@info("line", current_line_index, ":", line),

          numbers_in_line_as_strings : tokens(line),
          numbers_in_line : map(parse_string, numbers_in_line_as_strings),


          current_chis : extract_chis(the_coords),

          imlog@info("coords", the_coords),
          imlog@info("chis", current_chis),

          current_line_index : current_line_index + 1
        )
      ),
      close(input_stream)
    ),

    load(sol_lisp_file),
    relog@info("loaded sol of length", length(sol)),

    previous_pt : first(sol),
    previous_chi_signs : map(signum, extract_chis(coords(previous_pt))),
    the_epsilon : 1e-2,
    all_reactions_at_switch_instants : [],
    for pt in sol do (
      the_t : time(pt),
      the_coords : coords(pt),
      the_chis : extract_chis(the_coords),
      previous_chis : extract_chis(coords(previous_pt)),
      current_chi_signs : map(signum, the_chis),
      /* changed : not((current_chi_signs + previous_chi_signs) / 2 = current_chi_signs), */
      changed : member(
        true,
        makelist(
          (
            /*
            relog@info(
              i,
              "-------",
              signum(previous_chis[i]),
              signum(the_chis[i]),
              not(signum(previous_chis[i]) = signum(the_chis[i])),
              abs(previous_chis[i]),
              float(_chi_max_adjust),
              float(abs(abs(previous_chis[i]) - _chi_max_adjust)),
              float(abs(abs(previous_chis[i]) - _chi_max_adjust)) < 0.1,
              not(signum(previous_chis[i]) = signum(the_chis[i])) and abs(abs(previous_chis[i]) - _chi_max_adjust) < 0.1
            ),
            */
            not(signum(previous_chis[i]) = signum(the_chis[i])) and abs(abs(previous_chis[i]) - _chi_max_adjust) < 0.1
          ),
          i, 1, length(the_chis)
        )
      ),
      if changed then (
        one_step_further: step_over_switch(omni_vehicle, omni_vehicle@switcher@stepover_rhss, previous_pt),
        stepover_coords : coords(one_step_further),

        impact_sol : apply_impact_theory(stepover_coords),
        new_coords : impact_sol[1],
        reactions  : impact_sol[2],
        relog@info("changed at", the_t),
        relog@info("previous chis", previous_chis),
        relog@info("stepover chis", extract_chis(stepover_coords)),
        relog@info("next     chis", the_chis),
        relog@info("from     ", stepover_coords),
        relog@info("to       ", new_coords),
        relog@info("expected ", the_coords),
        relog@info("with reactions", reactions),
        all_reactions_at_switch_instants : cons(cons(the_t, reactions), all_reactions_at_switch_instants)
      ),
      previous_chi_signs : current_chi_signs,
      previous_pt : pt
    ),

    relog@info("kinda done calculating... now dumping to file."),

    dump_list_of_lists_to_file(
      reverse(all_reactions_at_switch_instants),
      sol_dat_switches_dat_file
    ),

    relog@info("all done!")
  )

) $


