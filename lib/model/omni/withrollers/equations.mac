require@omni_with_rollers_params() $
require@wheelutil() $
require@omni_with_rollers_symbols() $
require@timing() $

init() := block(
	timeit_start(),

	/* dM* /dt.nu */
	_D_M_star_dt_dot_nu: (diff(_M_star, t) where constraints) . nu,

	/* { P[alpha], L* } */
	_pois_P_L_star: transpose(pernu(
	    poiz(_P[i], L_star) where subst_ps
	, i)),

	/* { P[alpha], nu[mu]*P[mu] } */
	_sum_pois_P_alpha_P_mu_nu_mu: transpose(pernu(
		sumlist(pernu(nu[mu] * poiz(_P[i], _P[mu]), mu)) where append(
	    	subst_ps,
	    	[ theta = 0 ] /* easiest way to make Maxima handle sin^2 + cos^2 */
		), i)
	),

	_rhs_nu_noinvert: (-_D_M_star_dt_dot_nu - _pois_P_L_star + _sum_pois_P_alpha_P_mu_nu_mu),

	_M_star_inverse: invert_M(_M_star),

	_rhs_nu: transpose(_M_star_inverse . _rhs_nu_noinvert)[1],

	_rhs_chi: perwheel((_V . nu)[3+i][1], i),

	_rhs_contact_phi: perwheel((_V . nu)[3+params@N_wheels+i][1], i),
	_rhs_free_phi: pers3(nu[s], s),
	_rhs_phi: list_all_phi(_rhs_contact_phi, _rhs_free_phi),

	_rhs_coords: perbignu((_V . nu)[i][1], i),

	timeit_show()
) $