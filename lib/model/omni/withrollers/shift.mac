require@logging() $
require@wheelutil() $
require@omni_with_rollers_params() $
require@omni_with_rollers_symbols() $

init() := block(

	shlog: get_logger("shifting", log_level_info), 

	permut_list(l, perm) := makelist(l[i], i, perm),
	lshift(l) := permut_list(l, endcons(1, makelist(i, i, 2, length(l)))),
	rshift(l) := permut_list(l, cons(length(l), makelist(i, i, 1, length(l) - 1))),

	shift_vars_on_wheel(vars_on_wheel, chi, speed_of_roller_in_contact) := block(
		[ shifted_vars ],
		shlog@info("is this wheel switching? chi =", chi, "chi_max =", float(_chi_max_adjust)),
		if chi > _chi_max_adjust then (
		    shlog@info("wheel rotates counter-clockwise, therefore the freed-up roller will have #=1, others shifted forward, last - dropped."),
		    shifted_vars: rshift(vars_on_wheel),
		    shifted_vars[1]: speed_of_roller_in_contact
		) else if chi < -_chi_max_adjust then (
		    shlog@info("wheel rotates clockwise, therefore the freed-up roller will have #=n, others shifted backward, first - dropped."),
		    shifted_vars: lshift(vars_on_wheel),
		    shifted_vars[length(shifted_vars)]: speed_of_roller_in_contact
		) else (
		    shlog@info("this wheel is not switching"),
		    shifted_vars: vars_on_wheel
		),
		shifted_vars
	),
	calculate_speed_of_roller_in_contact(coords) := block(
		[ nu1_from_eqs, nu2_from_eqs, chis_from_eqs ],
		nu1_from_eqs  : extract_big_nus(coords)[1],
		nu2_from_eqs  : extract_big_nus(coords)[2],
		chis_from_eqs : extract_chis(coords),
	    perwheel(
	    	(_V . nu)[3 + params@N_wheels + i][1], /* we just need the values of constraints for \phi_{1..N_wheels, 1} */
	    	i
	    ) where append(
	        real(params),
	        [ nu[1] = nu1_from_eqs, nu[2] = nu2_from_eqs ],
	        perwheel(chi(i) = chis_from_eqs[i], i)
	    )
	),
	defstruct(WhatToShift(
		name,
		freed_values,
		wheel_splitter
	)),
	rollers() := new(WhatToShift("ROLLERS", calculate_speed_of_roller_in_contact, split_to_wheels)),
	/* don't want to track the angle of the roller in contact - just start with zero every time */
	phis()    := new(WhatToShift("PHIS",    [coords] -> makelist(0, c, coords),   split_all_to_wheels)), 
	shift_vars(what_to_shift, coords) ::= buildq([what_to_shift, coords], [vars] -> block(
		[ wheels, chis, freed_values, result ],
		shlog@info("shifting", what_to_shift@name),
		wheels: what_to_shift@wheel_splitter(vars),
		chis: extract_chis(coords),
		freed_values: what_to_shift@freed_values(coords),
		lreduce(append, perwheel((
			shlog@info("considering wheel #", i),
			shlog@info("was:", wheels[i]),
			result: shift_vars_on_wheel(wheels[i], chis[i], freed_values[i]),
			shlog@info("will be:", result),
			result
		), i))
	)),

	adjust(chi) := mod(chi - _chi_max_adjust, 2*_chi_max_adjust) - _chi_max_adjust,
	adjust_chis(chis) := map(adjust, chis)

) $