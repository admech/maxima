require@logging() $
require@model() $
require@switching() $

init() := block(
	[
		plot_vars
	],
	blog: get_logger("billiard", log_level_info),

	/* WALLS */

	walls(rhs_v, wall_coord) := switching(
		[ rhs_v ],
		[ x ],
		beyond(wall_coord)
	)[1],

	all_vars_solved_for() := [ x, v ],

	bounce_off(x, wall_coord) :=
		if x > wall_coord then wall_coord - (x - wall_coord)
		else if x < -wall_coord then -wall_coord + (-wall_coord - x)
		else x,
	bounce_off_walls(wall_coord) := buildq([wall_coord], lambda([initials], block(
		[
			x_val: initials[1],
			v_val: initials[2],
			next_initials
		],
		next_initials: [ bounce_off(x_val, wall_coord), -v_val ],
		blog@info("Switching from", initials, "to", next_initials),
		next_initials
	))),

	/* THE MODEL */

	Billiard(
		viscosity, wall_coord,
		v0, t1, t_step
	) := new(SwitchingModel(
		"One-dimensional billiard with viscous friction",
		new(RKAdapter(
			[ v, walls(-viscosity*v, wall_coord) ],
			[ x, v                               ],
			[ 0, v0                              ],
			new(Domain( 0, t1, t_step ))
		)),
		new(Switcher(bounce_off_walls(wall_coord), [ v, -viscosity*v ])),
		[
			new(PlotGroup(
				"coords",
				[
					new(PlotVar("x(t)", [p] -> [ p[1], p[2] ])),
					new(PlotVar("v(t)", [p] -> [ p[1], p[3] ]))
				],
				no_postamble,
				[ "t", "coord" ],
				[l] -> l
			)),
			new(PlotGroup(
				"phase",
				[
					new(PlotVar("v(x)", [p] -> [ p[2], p[3] ]))
				],
				equal_axes,
				[ "x", "v" ],
				[l] -> l
			))
		]
	))

) $
