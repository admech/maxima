/*
	Modules are needed to isolate namespaces and to manage dependencies.
	(note: dependencies of module.mac are loaded with batchload).
*/
print("______________________________") $
print("______________________________") $
print("______________________________") $
print("") $

sol_dir : "smoke" $

batchload("util/lang/extensions.mac") $
batchload("util/infra/env.mac") $
batchload("util/lang/module.mac") $

require@logging() $
require@pipeline() $
require@model() $

log : get_logger("main", log_level_info) $

log@debug(hr()) $

log_program_start() $

/*
require@lotka_volterra() $
run(
	LotkaVolterra(
		2/3, 4/3, 1, 1,
		1.8, 1.8
	), 
	new(Pipeline(
		solver@batch([ 1 ]),
		plot@files_in(out_dir)
	))
) $
*/

/*               viscosity, wall_coord,  v0,   t1,  t_step   */
/*
require@billiard() $
model: Billiard( 0.05,      100,         100,  120, 0.01    ) $
run(
	model,
	new(Pipeline(
		solver@batch(
			[ 20, 50, 120 ],
			with_switcher(model@switcher)
		),
		plot@windows
	))
) $
*/


DEFAULT_SIMULATION_PARAMETERS : [
	[ " model         ", " omni_with_rollers               " ],
	/*
	[ " how_to_switch ", " \"renumber_rollers\"            " ],
	*/
	[ " how_to_switch ", " \"apply_impact_theory\"         " ],
	[ " calc_and_log_delta_T ", " false                    " ],

	[ " batches       ", " makelist(0.1*i, i, 1, 10)       " ],
	[ " step          ", " 0.01                            " ],

	[ " nu_0          ", " [ 0, 0, 1 ]                     " ],
	[ " chi_0         ", " makelist( -%pi/4+0.1, i, 1, 3)  " ],
	[ " coords_0      ", " [ 0, 0, 0 ]                     " ],

	[ " N_wheels      ", " 3                               " ],
	[ " n_rollers     ", " 4                               " ],
	[ " r_hub         ", " 0.05                            " ],
	[ " M_hub         ", " 0.15                            " ],
	[ " m_roller      ", " 0.05                            " ],
	[ " R_platf       ", " 0.15                            " ],
	[ " M_platf       ", " 1                               " ]
] $

log@info("Loading model...") $
/*
load_simulation_parameters_from_file() $
*/
use_default_simulation_parameters() $
eval_string(concat("require@", get_global("model"), "()")) $
log@info("Done loading model.") $


log@info("Initializing model...", B where real(params)) $
omni_vehicle: OmniVehicle(
	params,
	new(OmniInitials(
		append(get_global("nu_0"), makelist(0, i, len_nu - 3)),
		get_global("chi_0"),
		get_global("coords_0")
	)),
	new(Domain( 0, 0.2, get_global("step") )),
	get_global("how_to_switch")
) $
log@info("Done initializing model.") $

run(
	omni_vehicle, 
	new(Pipeline(
		solver@batch(
			get_global("batches"),
			with_switcher(omni_vehicle@switcher)
		),
		/*
		plot@windows
		plot@files_in(out_dir)
		plot@dumping_points_to_file_in(out_dir)
		*/
		plot@these([
			plot@dumping_points_to_file_in(out_dir),
			plot@files_in(out_dir)
		])
	))
) $

/*
log@info("GONNA IMPACT") $
test : extract_and_put_contacting_first([
	11, 12, 13, 14,
	21, 22, 23, 24,
	31, 32, 33, 34,
	41, 42, 43, 44
]) $
log@info("AYAYAYYAYAA TEEEST", test) $
tmp : apply_impact_theory(
	append(
		[ nu[1], nu[2], nu[3] ],
		pers3(nu[s], s),
		perwheel(0, i),
		perall(freephi(i, j), i, j),
		[ x, y, theta ]
	)
) $
log@info("IMPACT DONE", float(tmp)) $
*/

/*
shift_restore_functions: [ [lshift], [[l] -> l], [rshift] ] $
print(restore_shifts(1)) $
*/

/*
batchload("model/exp/lang.mac") $
*/


log_program_finish() $



