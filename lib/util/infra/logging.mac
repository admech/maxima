require@timing() $

/* INTERFACE */
defstruct(
	Logger(
		name,
		level,
		debug,
		info,
		error
	)
) $

/* LEVELS */
log_level_debug : 1 $
log_level_info : 2 $
log_level_error : 3 $
log_levels : [ "DEBUG", "INFO", "ERROR" ] $
level_as_string(level) := log_levels[level] $
log_debug(logger) := buildq([logger], lambda([[args]], print_log_message(log_level_debug, logger, args))) $
log_info(logger) := buildq([logger], lambda([[args]], print_log_message(log_level_info, logger, args))) $
log_error(logger) := buildq([logger], lambda([[args]], 
	log_program_error(),
	print_log_message(log_level_error, logger, args),
	log_program_finish(),
	error("error from", logger@name)
)) $

/* PRINTING FUNCTIONS */
print_log_message(level, logger, args) := if level >= logger@level then printf(true,
	"~a~t--~t~f~t~t[ ~a ]~t[ ~a ]~t~a~%",
	timedate(),
	current_time(),
	level_as_string(level),
	logger@name,
	if listp(args) then lreduce(sconcat_on_space, args) else args
) $

/* FACTORY */
get_logger(name, level) := block([logger],
	logger: new(Logger),

	logger@name  : name,
	logger@level : level,
	logger@debug : log_debug(logger),
	logger@info  : log_info(logger),
	logger@error : log_error(logger),

	logger
) $

/* UTIL */
sconcat_on_space([args]) := lreduce(lambda([a, b], sconcat(a, " ", b)), args) $

hr() := "------------------------------" $

log_program_start() := block(
	print(""),
	print("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"),
	print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"),
	print("------------------------------"),
	print("")
) $

log_program_finish() := block(
	print(""),
	print("------------------------------"),
	print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"),
	print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"),
	print("")
) $

log_program_error() := block(
	print(""),
	print("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
	print("    X_X   X_x    x_X    x_x   "),
	print("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"),
	print("")
) $

log_3hr() := block(
	print(hr()),
	print(hr()),
	print(hr())
) $
