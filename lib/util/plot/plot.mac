require@logging() $
require@file() $

init() := block(
	[
		log : get_logger("plot", log_level_info)
	],

	defstruct(
		Plot( /* different ways of showing */
			devnull,
			list,
			windows,
			console,
			files_in
		)
	),
	plot : new(Plot),

	defstruct( /* a way of showing */
		Output(
			name, /* printed to log at pipeline launch */
			show  /* [sol, plot_groups] -> < present visually > */
		)
	),

	defstruct( /* a figure */
		PlotGroup(
			name,         /* plot title */
			vars,         /* list of PlotVars */
			postamble,    /* e.g. scale axes equally */
			xy_labels,    /* [ xlabel, ylabel ] */
			post_process  /* [ [[ax1,ay1], [ax2,ay2], ...], ... ] -> <same> ; e.g. restore omni rollers' shifts */
		)
	),

	defstruct( /* a line on a figure */
		PlotVar(
			name, /* shown in legend */
			get   /* [p] -> [ absciss, ordinate ] */
		)
	),

	/* show nothing */
	plot@devnull : new(Output(
		"sending to /dev/null",
		buildq([log],
			lambda([sol, plot_groups],
				log@info("plot > /dev/null")
			)
		)
	)),

	/* print all points of the solution */
	plot@list : new(Output(
		"listing the solution into the console",
		buildq([log],
			lambda([sol, plot_groups],
				block(
					log@info("Solution:"),
					for p in sol do log@info(p),
					log@info("End of solution.")
				)
			)
		)
	)),

	/* QT windows */
	plot@windows : new(Output(
		"plotting in windows",
		buildq([log],
			lambda([sol, plot_groups],
				plot_groups_separately(
					"Gnuplotting to QT windows...",
					window_term,
					plot_groups
				)
			)
		)
	)),
	window_num : 0,
	next_window_num() := (window_num: window_num + 1),
	window_term(group) := 
		[ gnuplot_term, sconcat("qt ", next_window_num(), " persist title '", group@name, "'") ]
	,

	/* ASCII art in the console */
	plot@console : new(Output(
		"plotting in the console",
		buildq([log, console_term],
			lambda([sol, plot_groups],
				plot_groups_separately(
					"Gnuplotting to console...", 
					console_term,
					plot_groups
				)
			)
		)
	)),
	console_term(group) := [ gnuplot_term, dumb ],

	/* file */
	file_term(target_dir) := buildq([target_dir], lambda([group], block([target_file],
		target_file : concat(target_dir, "/", group@name, ".eps"),
		log@info("[ plot ] Plotting to", target_file),
		set_plot_option([gnuplot_out_file, target_file]),
		[ gnuplot_term, ps ]
	))),
	plot@files_in : buildq([target_dir, file_term], lambda([target_dir], new(Output(
		"plotting to files",
		buildq([log, target_dir],
			lambda([sol, plot_groups],
				plot_groups_separately(
					"Gnuplotting to files...", 
					file_term(target_dir),
					plot_groups
				)
			)
		)
	)))),

	/*
		FUNTIONS THAT DO THE ACTUAL PLOTTING
	*/

	plot_groups_separately(msg, term, plot_groups) := block([teh_term],
		log@info(msg),
		for group in plot_groups do (
			teh_term: term(group),
			plot_to_terminal(
				sol,
				teh_term,
				group
			)
		)
	),

	plot_to_terminal : buildq([log], lambda([sol, terminal, group],
		log@debug(terminal[2], group@vars),
		log@info("Plotting", group@name, ":", rreduce(sconcat, rest(rreduce(append, makelist([var@name, ", "], var, group@vars)), -1))),
		series_of_2d_points: makelist(
			makelist(var@get(p), p, sol),
			var, group@vars
		),
		log@info("Post-processing..."),
		post_processed_series_of_2d_points: group@post_process(series_of_2d_points),
		log@info("Done post-processing"),
		legend_to_show: cons(
				legend,
				makelist(var@name, var, group@vars)
		),
		plot2d (
			map([series] -> [ discrete, series ], post_processed_series_of_2d_points),
			legend_to_show,
			[plot_format, gnuplot],
			terminal,
			group@postamble,
			[ xlabel, group@xy_labels[1] ],
			[ ylabel, group@xy_labels[2] ]
		)
	)),

	/* POSTAMBLES */
	no_postamble : [ gnuplot_postamble, "" ],
	equal_axes   : [ gnuplot_postamble, "set size ratio -1;" ]

) $