defstruct(ModuleLog(
	info = ([[args]] -> print("[ INFO ] [ MODULE ]", lreduce([a, b] -> sconcat(a, " ", b), args))),
	debug = ([[args]] -> print("[ DEBUG ] [ MODULE ]", lreduce([a, b] -> sconcat(a, " ", b), args)))
)) $
module_log : new(ModuleLog) $

module_log@info("Initializing module management...") $

loaded_files : [
	"util/lang/module.mac",
	"main.mac"
] $

load_with(loader, filename) := if not(member(filename, loaded_files)) then (
	loader(filename), 
	module_log@debug("Loaded", filename),
	loaded_files : cons(filename, loaded_files)
) $

import(filename) := block([init_result],
	module_log@debug("Importing", filename),
	load(filename),
	init_result : init(),
	if init_result = UNDEFINED then (
		module_log@error("Could not import", filename, "- it does not seem to be a module.")
	),
	module_log@debug("Done importing", filename),
	init() := UNDEFINED
) $

defstruct(
	Require(
		mod1      = ([] -> load_with(batchload, "model/exp/mod1.mac"       )),
		mod2      = ([] -> load_with(batchload, "model/exp/mod2.mac"       )),
		mod3      = ([] -> load_with(batchload, "model/exp/mod3.mac"       )),
		env       = ([] -> load_with(batchload, "util/infra/env.mac"       )),
		file      = ([] -> load_with(import,    "util/infra/file.mac"      )),
		logging   = ([] -> load_with(batchload, "util/infra/logging.mac"   )),
		pipeline  = ([] -> load_with(import,    "util/infra/pipeline.mac"  )),
		timing    = ([] -> load_with(batchload, "util/infra/timing.mac"    )),
		plot      = ([] -> load_with(import,    "util/plot/plot.mac"       )),
		model     = ([] -> load_with(batchload, "util/solve/model.mac"     )),
		solver    = ([] -> load_with(import,    "util/solve/solver.mac"    )),
		switching = ([] -> load_with(import,    "util/solve/switching.mac" )),

		oscillator         = ([] -> load_with(import,    "model/exp/oscillator.mac"           )),
		lotka_volterra     = ([] -> load_with(import,    "model/exp/lotka_volterra.mac"       )),
		billiard           = ([] -> load_with(import,    "model/exp/billiard.mac"             )),

		omni_with_rollers            = ([] -> load_with(import,    "model/omni/withrollers/vehicle.mac"    )),
		omni_with_rollers_params     = ([] -> load_with(import,    "model/omni/withrollers/params.mac"     )),
		omni_with_rollers_symbols    = ([] -> load_with(import,    "model/omni/withrollers/symbols.mac"    )),
		omni_with_rollers_equations  = ([] -> load_with(import,    "model/omni/withrollers/equations.mac"  )),
		omni_with_rollers_cases      = ([] -> load_with(import,    "model/omni/withrollers/cases.mac"      )),
		omni_with_rollers_shift      = ([] -> load_with(import,    "model/omni/withrollers/shift.mac"      )),
		omni_with_rollers_impact     = ([] -> load_with(import,    "model/omni/withrollers/impact.mac"     )),
		omni_with_rollers_plotgroups = ([] -> load_with(import,    "model/omni/withrollers/plotgroups.mac" )),
		omni_with_rollers_wheelutil  = ([] -> load_with(batchload, "model/omni/withrollers/wheelutil.mac"  )),
		omni_with_rollers_recalculator = ([] -> load_with(import, "model/omni/withrollers/recalculator.mac")),

		omni_no_rollers            = ([] -> load_with(import,    "model/omni/norollers/vehicle.mac"    )),
		omni_no_rollers_params     = ([] -> load_with(import,    "model/omni/norollers/params.mac"     )),
		omni_no_rollers_symbols    = ([] -> load_with(import,    "model/omni/norollers/symbols.mac"    )),
		omni_no_rollers_equations  = ([] -> load_with(import,    "model/omni/norollers/equations.mac"  )),
		omni_no_rollers_cases      = ([] -> load_with(import,    "model/omni/norollers/cases.mac"      )),
		omni_no_rollers_shift      = ([] -> load_with(import,    "model/omni/norollers/shift.mac"      )),
		omni_no_rollers_plotgroups = ([] -> load_with(import,    "model/omni/norollers/plotgroups.mac" )),
		omni_no_rollers_wheelutil  = ([] -> load_with(batchload, "model/omni/norollers/wheelutil.mac"  ))
	)
) $
require : new(Require) $

module_log@info("Done.") $