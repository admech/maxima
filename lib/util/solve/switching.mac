require@logging() $
require@model() $

init() := block(
	slog : get_logger("switching", log_level_info),

	/* ALLOWING RIGHT-HAND SIDES OF EQUATIONS TO NOTIFY SOLVER */

	beyond(threshold) ::= buildq([threshold], [var] -> (abs(var) > threshold)),

	defstruct(SwitchDump(
		stop_reason,
		t_dump,
		vars_dump
	)),
	DONE : new(SwitchDump("DONE", "o tempora", "o mores")),

	dump_vars_if(should_switch, var) ::= buildq([should_switch, var], [rhs] -> (
		if should_switch(var) then 
			switch_dump: new(SwitchDump(
				stop_reason: "switching",
				t_dump: t,
				/* actually this is not used as it does not produce any meaningful values.
				   if we could fix it though, we could eliminate stepover. */
				vars_dump: all_vars_solved_for()
			))
		else rhs
	)),
	switch_dump: DONE,
	get_switch_dump() := switch_dump,

	switching(rhss, vars, should_switch) := makelist(
		dump_vars_if(should_switch, vars[i])(rhss[i]),
		i, 1, length(rhss)
	),

	/* ALLOWING SOLVER TO ADJUST INITIALS AND CONTINUE */

	defstruct(
		SwitchingModel(
			name,
			rk_adapter,
			switcher,
			plot_groups
		)
	),

	defstruct(
		Switcher(
			transition,    /* [pre-switch rhss values] -> [post-switch rhss values] */
			stepover_rhss  /* should not signal switch */
		)
	),

	from_t_with_initials(switching_model, t, initials) := new(SwitchingModel(
		switching_model@name,
		new(RKAdapter(
			switching_model@rk_adapter@rhss,
			switching_model@rk_adapter@vars,
			initials, /* <------------------------- override initials   */
			new(Domain(
				t, /* <---------------------------- override start time */
				switching_model@rk_adapter@domain@finish,
				switching_model@rk_adapter@domain@stp
			))
		)),
		switching_model@switcher,
		switching_model@plot_groups
	)),

	step_over_switch(model, stepover_rhss, point_where_switch_was_detected) := block(
		[
			p : point_where_switch_was_detected,
			stp: model@rk_adapter@domain@stp,
			stepover_sol
		],
		slog@info("stepping over the switch at", time(p), "- acquiring one point into the prohibited zone..."),
		stepover_sol: simulate(
			new(Model(
				model@name,
				new(RKAdapter(
					stepover_rhss,
					model@rk_adapter@vars,
					coords(p),
					new(Domain(time(p), time(p) + stp, stp))
				)),
				model@plot_groups
			))
		),
		slog@info("acquired stepover, length =", length(stepover_sol), "returning point from prohibited area", custom_p_printer(last(stepover_sol))),
		last(stepover_sol)
	),

	iterate(solver, switcher, iter_num, previous_sol, model) := block(
		[
			sol,
			full_sol
		],
		slog@info(
			"Starting iteration", iter_num,
			"at", model@rk_adapter@domain@start,
			"with initials", custom_c_printer(model@rk_adapter@initials)
		),
		sol: solver(model),
		full_sol: append(previous_sol, sol), /* rest(sol, -1)),  cut off last point because switch happens at the same instant */
		if (get_switch_dump() = DONE) then (
			slog@info("Finished solving at", time(last(sol)), "with", custom_c_printer(coords(last(sol)))),
			full_sol
		) else (
			/* we would not need stepover if we could dump variables, but alas, rk may produce unpredictable results, not to speak of the variables not being available at the point of dumping */
			switch_dump: DONE,
			one_step_further: step_over_switch(model, switcher@stepover_rhss, last(sol)),
			iterate(
				solver, switcher, iter_num + 1, full_sol,
				from_t_with_initials(
					model,
					time(one_step_further),
					switcher@transition(coords(one_step_further))
				)
			)
		)
	),

	with_switcher(switcher) ::= block(
		buildq([switcher], [model] -> (
					slog@info("Using switcher:", switcher@transition),
					iterate(simulate, switcher, 1, [], model)
		))
	)

) $



