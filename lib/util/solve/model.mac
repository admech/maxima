require@plot() $
require@logging() $

molog : get_logger("model", log_level_info) $

defstruct(
	Model(
		name,
		rk_adapter,
		plot_groups
	)
) $

defstruct(
	RKAdapter(
		rhss,
		vars,
		initials,
		domain
	)
) $

defstruct(
	Domain(
		start,
		finish,
		stp
	)
) $

simulate(model) := block([rka],
	rka : model@rk_adapter,
	rk(rka@rhss, rka@vars, rka@initials, [ t, rka@domain@start, rka@domain@finish, rka@domain@stp ])
) $
load(rkf45) $
simulate_rkf45(model) := block([rka],
	rka : model@rk_adapter,
	rkf45(rka@rhss, rka@vars, rka@initials, [ t, rka@domain@start, rka@domain@finish ])
) $

/* BEWARE - THIS CHANGES THE MODEL
   (otherwise would have to code in a conditional checking whether it is a switching model) */
solve_with(model, initials, domain, solver) := block([rka],
	molog@info("overriding initials and domain to", initials, domain),
	model@rk_adapter@initials : initials,
	model@rk_adapter@domain   : domain,
	solver(model)
) $

time(p) := first(p) $
coords(p) := rest(p, 1) $