/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: title   start ]
Функция для интегрирования с переключениями
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
are_close(a, b) := abs(a - b) < 0.03 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
are_very_close(a, b) := abs(a - b) < 0.0001 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* this should be better */
solve_switching(rhss, vars, initials, indep, initials_by_stop_reason) := block(
    [iter, stop_reason, n_switches, n_cuts, last_point, stepover_iter],
    stop_reason: "",
    sol: [],
    n_switches: 0,
    n_cuts: 0,
    vprint("starting with initials =", initials, ", indep =", indep),
    for i:1 while not(stop_reason = "OK") do(

        vprint("starting iteration #", i),
        iter: rk(rhss, vars, initials, indep),

        last_point: last(iter),
        vprint("iteration done, length=", length(iter), ", last point=", last_point),
        vprint("current stop_reason=", stop_reason),

        if is((third(indep) - second(indep))/fourth(indep) > length(iter)) then (
            vprint("0_0 too short iteration! - maybe switching ???"),
            if are_very_close(first(last(iter)), third(indep)) then (
                vprint("last time point = max !"),
                if not(stop_reason = "") then (
                    vprint("cutting off last point that's accidentally t=max"),
                    iter: rest(iter, -1)
                )
            )
        ),

        if 
            not(stop_reason = "") /* calculation stopped from inside */
            and first(last(iter)) < third(indep) /* there is still time to be integrated */
        then (
            vprint("switching..."),
            /*
            vprint("cutting last point off to start next iter therefrom"),
            sol: append(sol, rest(iter, -1)),
            */
            sol: append(sol, iter),
            
            vprint("stepping over the switch..."),
            stepover_iter: rk(rhss, vars, rest(last_point,1), [ first(indep), first(last_point), first(last_point) + fourth(indep), fourth(indep) ]),
            vprint("acquired stepover, length=", length(stepover_iter), ", last=", last(stepover_iter), ", vars_dump=", vars_dump, ", t_dump=", t_dump),

            vprint("proceeding from t=", t_dump, ": ", vars_dump),
            initials: initials_by_stop_reason(stop_reason, vars_dump),
            indep: [ first(indep), t_dump, third(indep), fourth(indep) ],
            vprint("new initials=", float(initials), ", new indep=", indep),
            stop_reason: "",
            sudden_last: false,
            n_switches: n_switches + 1
        ) else (
            vprint("terminated okay. adding last iter to sol in full."),
            sol: append(sol, iter),
            stop_reason: "OK"
        )
    ),
    sol
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
permut(l, perm) := makelist(l[i], i, perm) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
nlshift_perm(n, size) := append(makelist(i, i, mod(n, size)+1, size), makelist(i, i, 1, mod(n, size))) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lshift(l) := permut(l, endcons(1, makelist(i, i, 2, length(l)))) $
rshift(l) := permut(l, cons(length(l), makelist(i, i, 1, length(l) - 1))) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Щас будем решать уравнения движения со всеми роликами. Такого ещё не было!
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Возьмем всю инфраструктуру из уравнений без роликов и только с нижним роликом:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("8_solving_old_and_new.wxm") ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Результаты положим в отдельный каталог:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
target_dir: "12_switching";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Дальше, чтобы понять, надо, чтобы был открыт 8_solving_old_and_new.wxm рядом на разделе Уравнения с роликами.
Всё в том же порядке делается.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Матрицы кинетической энергии и связей берем полностью, псевдоскорости - все:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_M_star $
_V $
nu $
q $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_all_V_chi: genmatrix(lambda([i,j], _V[3+i, j]), N_wheels, dof);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Получим слагаемые в уравнениях:
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
dM*/dt.nu
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_D_M_star_dt_dot_nu: (sum(diff(_M_star, q[3+i]) * _all_V_chi[i] . nu, i, 1, N_wheels)) . nu ;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
{ P[alpha], L* }
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_pois_P_L_star: transpose(makelist(
    pois(_P[i], L_star, z) where append(
        subst_ps
    )
, i, 1, dof)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
{ P[alpha], nu[mu]*P[mu] }
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_sum_pois_P_alpha_P_mu_nu_mu: transpose(makelist(sum(nu[mu] * pois(_P[i], _P[mu], z), mu, 1, dof) where append(
    subst_ps,
    [ theta = 0 ] /* easiest way to make Maxima handle sin^2 + cos^2 */
), i, 1, dof)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
соберем всю правую часть:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_rhs_nu_noinvert: (-_all_D_M_star_dt_dot_nu - _all_pois_P_L_star + _all_sum_pois_P_alpha_P_mu_nu_mu) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Матрицу M* так просто не обратишь из-за размерности.
Воспользоваться формулой Фробениуса (матрица имеет блочный вид) сложно, т.к. матрица Шура имеет всё равно большую размерность.
Обратим её методом Гаусса.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_M_star_inverse: invert_M(_M_star) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* too huge, don't try to vprint - will read Maxima output forever */
_all_rhs_nu_explicit: _all_M_star_inverse . _all_rhs_nu_noinvert $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
length(_all_rhs_nu_explicit);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
listofvars(_all_rhs_nu_explicit);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_all_rhs_nu: transpose(_all_rhs_nu_explicit)[1] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
length(_all_rhs_nu);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
связи на chi:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_rhs_chi: makelist((_V . nu)[i][1], i, 4, 3 + N_wheels);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
we will use chi to notify the solver that the wheels should switch.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
get_wheels_switching_message(chi_rhss) := apply(concat, append(
    [ "switching " ],
    makelist(
        if are_close(abs(adjust(chis[i])), _chi_max_adjust) then (
            concat(i, " ", sign(chi_rhss[i]), " ")
        ) else "",
        i, 1, N_wheels
    )
)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* maxima just can't get elements of stuff by index within makelist - see next cell */
tmps: makelist(tmps[i], i, 1, N_wheels);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
in the old solutions it had n+1 in the denominator for some reason...
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_chi_max_adjust: %pi/n_rollers;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
should switch iff close to border and actually crossing it. epic.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
close_and_crossing(the_chi, the_rhs) :=
        are_close(abs(adjust(the_chi)), _chi_max_adjust)
        and (
            (adjust(the_chi) < _chi_max_adjust and the_rhs > 0)
            or
            (adjust(the_chi) > -_chi_max_adjust and the_rhs < 0)
        ) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* HARDCODED TIME STEP 0.01 !!!!! */
just_crossed(the_chi, the_rhs) :=
    /* below the upper border,                declining,        was above */
    (adjust(the_chi) < _chi_max_adjust   and  the_rhs < 0  and  adjust(the_chi) - the_rhs*0.01 > _chi_max_adjust )
    or
    /* above the lower border,                growing,          was below */
    (adjust(the_chi) > -_chi_max_adjust  and  the_rhs > 0  and  adjust(the_chi) - the_rhs*0.01 < -_chi_max_adjust)
$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
float(_chi_max_adjust);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
chi_outside_boundaries(the_chi) := the_chi > _chi_max_adjust or the_chi < -_chi_max_adjust $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_all_rhs_chi_switching() := makelist(
    if not(
        /* close_and_crossing(chis[i], tmps[i]) */
        /* 'just_crossed(chis[i], tmps[i]) */
        chi_outside_boundaries(chis[i])
    ) then tmps[i] else (
        [
            stop_reason: "switching",
            /* vars_dump: [ nu1,   nu2,   nu3,   chi1,   chi2,   chi3,   x,   y,   theta,    nu4, nu5, nu6, nu7, nu8, nu9, nu10, nu11, nu12 ], */
            vars_dump: solvable_vars(),
            t_dump: t
        ]
    ),
    i, 1, N_wheels
) where makelist(
    tmps[i] = _all_rhs_chi[i],
    i, 1, N_wheels
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
пр-ч для x, y, theta
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_rhs_coords: makelist((_V . nu)[i][1], i, 1, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ULTIMATE PARAMS
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
all_ultimate_params(N_wheels, n_rollers) := block([
        n_sharp_rollers, /* such n rollers that the full pack is only possible with sharp ones */
        r, /* radius of hub (dist from wheel axis to roller axis) */
        _chi_max_geom, /* half roller width angle if it were to have sharp ends */
        l, /* radius of wheel (distance from axis to ground) */
        I_S, /* total moi wrt vert axis */
        I_0_S, /* moi of platf and hubs wrt vert axis */
        A, /* moi roller wrt orthogonal axis */
        B, /* moi roller wrt roller axis */
        R, /* platform radius */
        m, /* roller mass */
        M_platf,
        M_hub,
        r_roller_moi,
        h_roller_moi,
        _chi_max_adjust, /* value of chi on which rollers switch - i.e. border of cut roller */
        J_0, /* moi hub wrt wheel axis */
        M /* total mass */
    ],
    n_sharp_rollers: n_rollers - 1,
    r: 0.05,
    m: 0.05,
    R: 0.15,
    M_platf: 1,
    M_hub: 0.15,
    _chi_max_geom: %pi/n_sharp_rollers,
    l: r / cos(_chi_max_geom),
    I_0_S: M_platf*R^2/2 + N_wheels*(M_hub*R^2 + M_hub/12*(3*r^2 + 0.01^2)),
    r_roller_moi: (l - r)/2,
    _chi_max_adjust: %pi/n_rollers,
    h_roller_moi: 2*l*sin(_chi_max_adjust),
    A: 1/12 * m * (3*r_roller_moi^2 + h_roller_moi^2),
    B: (m*r_roller_moi^2)/2,
    I_S: I_0_S + N_wheels*n_rollers*((A+B)/2+m*R^2+m*r^2/2),
    J_0: (M_hub*r^2)/2,
    M: M_platf + N_wheels*M_hub + N_wheels*n_rollers*m,
    append(
        [ sin(theta)^2*'M*'R^2=1-cos(theta)^2*'M*'R^2 ], /* just in case some symbolic math systems don't handle this */
        flatten(makelist([
            alpha[i] = 2*%pi/N_wheels*(i-1) /* ,
            chis[i] = adjust(chis[i]) */ /* let's not adjust chi, but just terminate when they exceed */
        ], i, 1, N_wheels)),
        makelist(
            kappa[i] = 2*_chi_max_adjust*(i-1)
        , i, 1, n_rollers),
        [
            '_chi_max_adjust = _chi_max_adjust,
            'B = float(B),
            'R = R,
            'l = l,
            J = float(J_0 + n_rollers*(A+m*r^2)),
            'Lambda = float(I_S / (M*l^2)), /* dimensionless parameter defined as in paper */
            'I_S = float(I_S),
            'M = M,
            'r = r
        ]
    )
) $
for param in all_ultimate_params(N_wheels, n_rollers) do vprint(param) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
итого:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_all_all_the_rhss() := (append(_all_rhs_nu, _all_rhs_chi_switching(), _all_rhs_coords) where all_ultimate_params(N_wheels, n_rollers)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
rhs with free rollers depends on the corresponding nus
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
listofvars(all_the_rhss);
listofvars(_all_all_the_rhss());
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
COMBINE SOLVE_SWITCHING AND OMNI_SOLVE
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
we basically need to override the low-level RK solver so that it switched rollers
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
should understand how to rearrange variables: nu[s].
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
verbose: false;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
extract_free_nus(initials, wheel_idx) := block(
    [start_idx, result],
    print("    extracting free nus for i=", wheel_idx, " from ", initials),
    start_idx:
        3+3+N_wheels /* skip big nus, big coords and chis */
        + (wheel_idx-1)*(n_rollers-1) /* skip other wheels' free nus */
    ,
    print("        start_idx=", start_idx),
    result: makelist(initials[j], j, start_idx + 1, start_idx + n_rollers - 1),
    print("        result=", result),
    result
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
tmp_initials: [ nu1,   nu2,   nu3,   chi1,   chi2,   chi3,   x,   y,   theta,    nu4, nu5, nu6, nu7, nu8, nu9, nu10, nu11, nu12 ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
extract_free_nus(tmp_initials, 1);
extract_free_nus(tmp_initials, 2);
extract_free_nus(tmp_initials, 3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
next_free_nus(chi_val, phi_rhs, free_nus) := block(
    [shifted_nus],
    print("    calculating next free nus for chi=", chi_val, ", phi_rhs=", phi_rhs, ", free_nus=", free_nus),
    if chi_val > _chi_max_adjust then (
        print("          wheel rotates counter-clockwise, therefore the freed-up roller will have #=1, others shifted forward, last - dropped."),
        shifted_nus: rshift(free_nus),
        shifted_nus[1]: phi_rhs
    ) else if chi_val < -_chi_max_adjust then (
        print("          wheel rotates clockwise, therefore the freed-up roller will have #=n, others shifted backward, first - dropped."),
        shifted_nus: lshift(free_nus),
        shifted_nus[length(shifted_nus)]: phi_rhs
    ) else (
        print("          this wheel is not switching"),
        shifted_nus: free_nus
    ),
    print("        result=", shifted_nus),
    shifted_nus
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
next_free_nus(1,  100500, [nu4, nu5, nu6]);
next_free_nus(-1, 100500, [nu4, nu5, nu6]);
next_free_nus(0,  100500, [nu4, nu5, nu6]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
get_phi_rhss(initials) := block(
    [ result ],
    print("    calculating rhs for phi..."),
    print("        nu1=", initials[1], ", nu2=", initials[2], ", chi=", makelist(chis[i] = initials[3+i], i, 1, N_wheels)),
    print("        nu123=", nus),
    result: makelist((_V . nu)[i][1], i, 3 + N_wheels + 1, 3 + 2*N_wheels) where append(
        all_ultimate_params(N_wheels, n_rollers),
        [ nu1 = initials[1], nu2 = initials[2] ],
        makelist(chis[i] = initials[3+i], i, 1, N_wheels)
    ),
    print("        phi_rhss=", result),
    result
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
get_phi_rhss([ nu1,   nu2,   nu3,   chi1,   chi2,   chi3,   x,   y,   theta,    nu4, nu5, nu6, nu7, nu8, nu9, nu10, nu11, nu12 ]) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
do_switch(initials) := block(
    /* [ nu1,   nu2,   nu3,   chi1,   chi2,   chi3,   x,   y,   theta,    nu4, nu5, nu6, nu7, nu8, nu9, nu10, nu11, nu12 ],*/
    [ chi_vals, phi_rhss ],
    print("Calculating next initials..."),
    chi_vals: makelist(initials[i], i, 4, 3+N_wheels),
    phi_rhss: get_phi_rhss(initials),
    append(
        makelist(initials[i], i, 1, 3), /* big nus */
        makelist(adjust(chi_vals[i]), i, 1, N_wheels),
        makelist(initials[i], i, 3+N_wheels+1, 3+N_wheels+3), /* xytheta */
        xreduce(
            append,
            makelist(
                next_free_nus(chi_vals[i], phi_rhss[i], extract_free_nus(initials, i)),
                i, 1, N_wheels
            )
        )
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
float(do_switch(
    [nu1,nu2,nu3,1,-1,0,x,y,theta,nu4,nu5,nu6,nu7,nu8,nu9,nu10,nu11,nu12]
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
omni_switcher(stop_reason, initials) := block(
        vprint("OMNI_SWITCHER INVOKED"),
        if ssearch("switch", stop_reason) = 1
        then (
            vprint("SWIIIITCH!"),
            /* initials */
            do_switch(initials)
        )
        else error("unknown stop_reason", stop_reason)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
SOLUTIONS
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
showtime: true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_allowed: true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
target_dir: "12_switching";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
free rollers will be put to the tail of the coords vector so that plot functions did not mix them up
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
vprint("INITIALIZING RHS...") $
the_rhss: _all_all_the_rhss() $

vprint("PUTTING FREE ROLLERS TO THE END") $
_all_all_the_rhss_free_trailing: makelist(
    the_rhss[i],
    i,
    append(
        [1,2,3],
        makelist(j, j, dof+1, length(the_rhss)),
        makelist(j, j, 4,     dof)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
vprint("OVERRIDING SOLVER") $

omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    chi1_0, chi2_0, chi3_0, 
    x_0, y_0, _theta_0,
    free_nus,
    t0, t1, t_step
) := solve_switching(
    _all_all_the_rhss_free_trailing where makelist(nu[i] = 0, i, 4, dof),
    [ nu1,   nu2,   nu3,   chi1,   chi2,   chi3,   x,   y,   theta,    nu4, nu5, nu6, nu7, nu8, nu9, nu10, nu11, nu12 ],
    [ nu1_0, nu2_0, nu3_0, chi1_0, chi2_0, chi3_0, x_0, y_0, _theta_0, free_nus[1], free_nus[2], free_nus[3], free_nus[4], free_nus[5], free_nus[6], free_nus[7], free_nus[8], free_nus[9] ],
    [ t, t0, t1, t_step],
    omni_switcher
) $

omni_solve(
    nu1_0, nu2_0, nu3_0, 
    t1, t_step
) := omni_solve_extended(
    nu1_0, nu2_0, nu3_0, 
    0, 0, 0,
    0, 0, 0,
    makelist(0, i, 1, dof - 3),
    0, t1, t_step
) $

omni_solve_next(sol, t1) := block([last_point],
    last_point: last(sol),
    omni_solve_extended(
        last_point[2], last_point[3], last_point[4], 
        last_point[5], last_point[6], last_point[7], 
        last_point[8], last_point[9], last_point[10],
        rest(last_point, 10),
        last_point[1], t1, (last_point[1] - first(sol)[1])/(length(sol) - 1)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
UP NEXT:

2) DECIPHER:
    HOW DO WE PLOT STUFF ???
    THAT IS, GET nu_j(t) where j > 3 ? AND phi_j(t). using chi, adjust and the switcher.

*) WHY THE HELL DO WE HAVE NU[I] = 0 FOR 4..DOF !??!?!?!?!?!?

3) PARALLELIZE:
    CAN I PACK IT INTO A VM AND SCHEDULE ON A CLUSTER ?
    E.G. MAKE A VIRTUALBOX IMAGE WITH MAXIMA, THE PROGRAM (SHOULD IT BE REWRITTEN?) AND A LAUNCHER AGENT (JAVA?)
    THAT WILL BE AVAILABLE VIA THE AGENT THAT EXPOSES A PORT I CAN WRITE PARAMS INTO AND IT WILL SEND ME BACK THE RESULTS,
    AND ALL THIS WILL BE SCHEDULED FROM MY LOCAL MACHINE (JENKINS?).

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
vprint([args]) := if verbose then apply(print, args) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
verbose:false;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
msgvars(message) := buildq([message], lambda([var], 
    print(
        t, " - ", message, ": ", ''var, "; vars: ",
        /* nu1, nu2, nu3, nu4, nu5, nu6, nu7, nu8, nu9, nu10, nu11, nu12 */
        vars_dump
    ),
    var
)) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dumping() := lambda([var],
    vars_dump: solvable_vars(),
    var
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
solvable_rhss: _all_all_the_rhss_free_trailing where makelist(nu[i] = 0, i, 4, dof) $
solvable_vars() := [ nu1,   nu2,   nu3,   chi1,   chi2,   chi3,   x,   y,   theta,    nu4, nu5, nu6, nu7, nu8, nu9, nu10, nu11, nu12 ] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
vprintable_rhss() := makelist(
    ('msgvars(concat(solvable_vars()[i], " :"))(solvable_rhss[i])),
    i, 1, length(solvable_vars())
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
SOLUTIONS
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
JUST A SWITCH
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
sol: solve_switching(
    solvable_rhss,
    solvable_vars(),
    [0.0,0.0,9.99746279868765,-0.7570996161486709,-0.7570996161486709,-0.7570996161486709,0.0,0.0,0.5047330774324473
,1.043774980965087,-1.561097497153088,-1.043774980965087,1.043774980965087,-1.561097497153088,-1.043774980965087,1.043774980965087,-1.561097497153088,-
1.043774980965087],
    [ t, 0.09, 0.1, 0.01],
    omni_switcher
) $
for p in sol do vprint(p) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
NEW PLOTS
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
s(i,j) := (i-1)*(n_rollers-1)+(j-1) $
nusi(nu, i, j) := nu[3+s(i,j)] $
pnusi(p, i, j) := p[1+9+s(i,j)] $
/* for i:1 thru N_wheels do for j:2 thru n_rollers do print(i, j, nusi(nu, i, j), pnusi(pp,i,j)) $ */
plot_wheel(i, sol) := plot(
    makelist(
        [discrete,makelist([p[1],pnusi(p,i,j)],p,sol)],
        j, 2, n_rollers
    ),
    concat("wheel ", i)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
next_contact_roller_index(p_cur, p_prev, cur_index) := block([deriv],
    deriv: (_chi1(p_cur)-_chi1(p_prev))/(first(p_cur) - first(p_prev)),
    print(deriv),
    cur_index + (if deriv > 1000 then 1 else if deriv < -1000 then -1 else 0)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
next_contact_roller_indices(p_cur, p_prev, cur_indices) := block([derivs],
    derivs: makelist((p_cur[4+i]-p_prev[4+i] /*chi*/)/(first(p_cur) - first(p_prev)), i, 1, N_wheels),
    makelist(cur_indices[i] + (if derivs[i] > 1000 then 1 else if derivs[i] < -1000 then -1 else 0), i, 1, N_wheels)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
get_sol_contact_rollers(sol) := block([cur_indices, sol_from_second],
    cur_indices: makelist(1, i, 1, N_wheels),
    makelist(
        append(
            [sol[i][1]],
            cur_indices: next_contact_roller_indices(sol[i], sol[i-1], cur_indices)
        ),
        i, 2, length(sol)
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_contact_rollers(sol) := block([sol_rollers, cur_indices, sol_from_second, forsol],
    cur_indices: makelist(1, i, 1, N_wheels),
    sol_rollers: get_sol_contact_rollers(sol),
    forsol(p_fun) := [discrete, makelist([p[1], p_fun(p)], p, sol_rollers)],
    plot(append(
            makelist(
                forsol([p] -> p[i+1]),
                i, 1, N_wheels
            ),
            [ forsol([p] -> 0), forsol([p] -> (n_rollers + 1)) ]
        ), "contact rollers"
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_stuff_to_file(sol_name) := block([sol],
    sol: eval_string(sol_name),

    set_gnuplot_out_file(concat(sol_name, "_trajectory")),
    plot_trajectory(sol),

    set_gnuplot_out_file(concat(sol_name, "_theta")),
    plot_theta(sol),

    set_gnuplot_out_file(concat(sol_name, "_nu12")),
    plot_nu12(sol),

    set_gnuplot_out_file(concat(sol_name, "_nu12_centered")),
    doPlot("nu1, nu2 normed", [
        lambda([p], _nu1(p) - _nu1(sol[1])),
        lambda([p], _nu2(p) - _nu2(sol[1]))
    ], sol),

    set_gnuplot_out_file(concat(sol_name, "_nu3")),
    plot_nu3(sol),

    set_gnuplot_out_file(concat(sol_name, "_kin_en")),
    plot_kin_en(sol),

    set_gnuplot_out_file(concat(sol_name, "_chi")),
    plot_chi(sol),

    for i:1 thru N_wheels do (
        set_gnuplot_out_file(concat(sol_name, "_wheel_", i)),
        plot_wheel(i, sol)
    ),

    set_gnuplot_out_file(concat(sol_name, "_contact_rollers")),
    plot_contact_rollers(sol),

    remove_gnuplot_out_file()
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
real_M_star() := ((transpose(_V) . _M . _V) where 
    all_ultimate_params(N_wheels, n_rollers)
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kin_energy(nu_list, chi_list, real_M_star) := (nu_list . real_M_star . transpose(nu_list)) where makelist(chis[i] = adjust(chi_list[i]), i, 1, N_wheels) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kin_en(sol_pt, real_M_star) := kin_energy(
    append([ sol_pt[2], sol_pt[3], sol_pt[4] ], rest(sol_pt, length(sol_pt) - (dof-3))),
    [ sol_pt[5], sol_pt[6], sol_pt[7] ],
    real_M_star
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
A FAST SOLUTION
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
showtime: true $
vprint("SOLVING") $
plot_stuff_to_file(
    new_batch_solve(
        0, 0, 10, 
        0.001, [ 0.05, 0.15 ]
    )
) $
showtime: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Расшифровка
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Нужно по sol восстановить поведение каждой переменной и номера роликов в контакте в каждый момент
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
length(_sol__0_0_10__0__0_15__1e3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
showtime: true $
vprint("SOLVING") $
plot_stuff_to_file(
    new_batch_solve(
        0, 0, 10, 
        0.01, [ 0.05, 0.1, 0.15 ]
    )
) $
showtime: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
sol: _sol__0_0_10__0__0_15__1e3 $
contact_roller_index: 1 $
verbose: true $
cur_indices: [1,1,1] $
for i:2 thru length(sol) do (
    prev: sol[i-1],
    cur: sol[i],
    contact_roller_index: next_contact_roller_index(cur, prev, contact_roller_index),
    cur_indices: next_contact_roller_indices(cur, prev, cur_indices),
    vprint(first(cur), _chi1(cur), deriv, contact_roller_index, cur_indices)
);
verbose: false $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_chi(_sol__0_0_10__0__0_15__1e3) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
plot_wheel(3, _sol__0_0_10__0__0_15__1e3) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
float(_all_rhs_nu_noinvert where append(
    all_ultimate_params(N_wheels, n_rollers),
    [
    nu1=0,
    nu2=0,
    nu3=10,
    nu4=0,
    nu5=0,
    nu6=0,
    nu7=0,
    nu8=0,
    nu9=0,
    nu10=0,
    nu11=0,
    nu12=0,
    chi1=%pi/6,
    chi2=%pi/6,
    chi3=%pi/6
    ]
));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
rest(_all_rhs_nu_noinvert, 3) 
/* where all_ultimate_params(N_wheels, n_rollers) */
;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
-rest(diff(_M_star, t).nu, 3) where makelist(
    diff(chis[i], t) = (_V.nu)[3+i],
    i, 1, N_wheels
);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
