/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 15.04.0 ] */

/* [wxMaxima: title   start ]
A function to invert M*
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
The function
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Helpers
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
mat_E(n) := genmatrix(lambda([i,j], if i = j then 1 else 0), n) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mat_0(n,m) := genmatrix(lambda([i,j], 0), n, m) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* multiply by this matrix from the left (this . yours) to get yours row n multiplied by mult */
mult_row(mult, n, size) := mat_E(size) + ematrix(size, size, mult - 1, n, n) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* add row n multiplied by mult to row m */
add_row(mult, n, m, size) := mat_E(size) + ematrix(size, size, mult, m, n) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
The function
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
invert_M(mat) := block(
    [
        size, B, bs,
        step1, step2,
        indices_to_remove, upper_left_corner
    ],

    size: length(mat),
    B: mat[4,4], /* diagonal elements of the lower-right corner */
    bs: makelist(mat[3,i], i, 4, size), /* elements of the third line (row) beyond the upper-left corner */
    indices_to_remove: makelist(i, i, 4, size), /* so as to retain only the upper-left corner */

    /* step 1: eliminate elements of line 3 (the 'bs') beyond the upper-left corner */
    /*         to get a modified state of it needed in step 2                       */
    step1: lreduce(             /* elementary transformations are encoded as matrices below and applied by multiplying by them from the left, */
        lambda([a,b], a.b),     /* so code is executed in reverse order                                                                       */
        append(
            makelist(add_row(-bs[i]/B, i+3, 3, size), i, 1, size-3), /* to do so, add rows starting with 4 multiplied accordingly */
            [ mat ]                                                  /* M* is being used here */
        )
    ),

    /* we'll need to invert it in step 2... */
    upper_left_corner: apply(submatrix, append(indices_to_remove, [step1], indices_to_remove)),

    /* apply transformations to an identity matrix */
    step2: ratsimp(lreduce( /* remember, things happen in reverse order */
        lambda([a,b], a.b),
        append(
            makelist(mult_row(1/B, i, size), i, 4, size),            /* last, unscale the lower-right corner */
            makelist(add_row(-bs[i], 3, i+3, size), i, 1, size-3),   /* third, remove column 3 */
            [                                                        /* second, multiply by the inverse upper-left corner */
                mat_fullunblocker(matrix(
                    [ invert(upper_left_corner), mat_0(3,size-3) ],
                    [ mat_0(size-3,3),           mat_E(size-3)   ]
                ))
            ],
            makelist(add_row(-bs[i]/B, i+3, 3, size), i, 1, size-3), /* first, eliminate row 3 again (now for E, not M*) */
            [ mat_E(size) ]
        )
    ))
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Check
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
tmp: matrix(
    [ 0, 0, 1, 0, 0, 0 ],
    [ 0, 1, 0, 0, 0, 0 ],
    [ 1, 0, 0, 4, 5, 6 ],
    [ 0, 0, 4, 7, 0, 0 ],
    [ 0, 0, 5, 0, 7, 0 ],
    [ 0, 0, 6, 0, 0, 7 ]
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratsimp(expand(invert_M(tmp) . tmp));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
How it was obtained
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Blocks of M*
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
_A: matrix(
    [a11, a12, a13],
    [a12, a22, a23],
    [a13, a23, a33]
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bs: [b1, b2, b3, b4] $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_B: matrix(
    [0,  0,  0,  0 ],
    [0,  0,  0,  0 ],
    bs
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_Bt: transpose(_B);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
_BE: B*mat_E(4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
M* itself
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_M: mat_fullunblocker(matrix(
    [_A,  _B ],
    [_Bt, _BE]
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Invert M* using Gauss elimination
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
step 1: eliminate the 1,2 block:
multiply each line i > 3 by -b[i-3]/B and add to line 3
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
st1: lreduce(
    lambda([a,b], a.b),
    append(
        makelist(add_row(-bs[i]/B, i+3, 3, 7), i, 1, 4),
        [ _M ]
    )
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
step 2: eliminate A_1
multiply _M_1 and _E_1 by a matrix with A_1^(-1) on the top left and E on the bottom right
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
st2: ratsimp(lreduce(
    lambda([a,b], a.b),
    append(
        [ 
            mat_fullunblocker(matrix(
                [ invert(submatrix(4,5,6,7,st1,4,5,6,7)), mat_0(3,4) ],
                [ mat_0(4,3),                             mat_E(4)   ]
            ))
        ],
        makelist(add_row(-bs[i]/B, i+3, 3, 7), i, 1, 4),
        [ _M ]
    )
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
step 3: eliminate b[i]:
multiply line 3 by -b[i] and add to line i
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
st3: ratsimp(lreduce(
    lambda([a,b], a.b),
    append(
        makelist(add_row(-bs[i], 3, i+3, 7), i, 1, 4),
        [ 
            mat_fullunblocker(matrix(
                [ invert(submatrix(4,5,6,7,st1,4,5,6,7)), mat_0(3,4) ],
                [ mat_0(4,3),                             mat_E(4)   ]
            ))
        ],
        makelist(add_row(-bs[i]/B, i+3, 3, 7), i, 1, 4),
        [ _M ]
    )
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
step 4: eliminate B
multiply lines 3+1 .. n by 1/B
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
st4: ratsimp(lreduce(
    lambda([a,b], a.b),
    append(
        makelist(mult_row(1/B, i, 7), i, 4, 7),
        makelist(add_row(-bs[i], 3, i+3, 7), i, 1, 4),
        [ 
            mat_fullunblocker(matrix(
                [ invert(submatrix(4,5,6,7,st1,4,5,6,7)), mat_0(3,4) ],
                [ mat_0(4,3),                             mat_E(4)   ]
            ))
        ],
        makelist(add_row(-bs[i]/B, i+3, 3, 7), i, 1, 4),
        [ _M ]
    )
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Check
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
apply the same transformations to E(7) and multiply _M
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_M_inv: ratsimp(lreduce(
    lambda([a,b], a.b),
    append(
        makelist(mult_row(1/B, i, 7), i, 4, 7),
        makelist(add_row(-bs[i], 3, i+3, 7), i, 1, 4),
        [ 
            mat_fullunblocker(matrix(
                [ invert(submatrix(4,5,6,7,st1,4,5,6,7)), mat_0(3,4) ],
                [ mat_0(4,3),                               mat_E(4)   ]
            ))
        ],
        makelist(add_row(-bs[i]/B, i+3, 3, 7), i, 1, 4),
        [ mat_E(7) ]
    )
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratsimp(expand(_M_inv . _M));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Understanding this matrix
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
determinant of the upper-left corner of M* with eliminated row 3 (starting from the fourth element)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
uber_det: ((a11*a22-a12^2)*a33-a11*a23^2+2*a12*a13*a23-a13^2*a22)*B+(a12^2-a11*a22)*b4^2+(a12^2-a11*a22)*b3^2+(a12^2-a11*a22)*b2^2+(a12^2-a11*a22)*b1^2 $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
parts of uber_det after (...)*B - they apper in the lower-right of the inverse
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
det_bits: [ (a12^2-a11*a22)*b4^2, (a12^2-a11*a22)*b3^2, (a12^2-a11*a22)*b2^2, (a12^2-a11*a22)*b1^2 ];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
minus_det_bits: ratsimp(-[ (a12^2-a11*a22)*b4^2, (a12^2-a11*a22)*b3^2, (a12^2-a11*a22)*b2^2, (a12^2-a11*a22)*b1^2 ]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
simpify_lower_right_corner(mat) := rreduce(
    lambda([pair, expr], subst(first(pair), second(pair), expr)),
    append(
        makelist(
            [ 'uber_det + minus_det_bits[4-i+1], uber_det - det_bits[4-i+1] ],
            i, 1, 4
        ),
        [ mat ]
    )
) $
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the inverse multiplied by det
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_M_inv_times_uber_det: subst(
    'uber_det*B, ((a11*a22-a12^2)*a33-a11*a23^2+2*a12*a13*a23-a13^2*a22)*B^2+((a12^2-a11*a22)*b4^2+(a12^2-a11*a22)*b3^2+(a12^2-a11*a22)*b2^2+(a12^2-a11*a22)*b1^2)*B,
    subst(
        'uber_det, uber_det, 
        _M_inv
    )
) * 'uber_det;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
inverse multiplied by det and simplified in the lower-right
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
_M_inv_times_uber_det_simp: simpify_lower_right_corner(_M_inv_times_uber_det);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Check using the fancy function from top
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
ratsimp(expand(invert_M(_M) . _M));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
